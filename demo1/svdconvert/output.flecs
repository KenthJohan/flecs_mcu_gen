ADC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog to Digital ConverteR"}
}
module ADC
ADC_ISR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC interrupt and status register"}
	ADRDY {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC ready
This bit is set by hardware after the ADC has been enabled (ADEN=1) and when the ADC reaches a state where it is ready to accept conversion requests.
It is cleared by software writing 1 to it."}
	}
	EOSMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of sampling flag
This bit is set by hardware during the conversion, at the end of the sampling phase.It is cleared by software by programming it to '1'."}
	}
	EOC {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of conversion flag
This bit is set by hardware at the end of each conversion of a channel when a new data result is available in the ADC_DR register. It is cleared by software writing 1 to it or by reading the ADC_DR register."}
	}
	EOS {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of sequence flag
This bit is set by hardware at the end of the conversion of a sequence of channels selected by the CHSEL bits. It is cleared by software writing 1 to it."}
	}
	OVR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC overrun
This bit is set by hardware when an overrun occurs, meaning that a new conversion has complete while the EOC flag was already set. It is cleared by software writing 1 to it."}
	}
	AWD1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 1 flag
This bit is set by hardware when the converted voltage crosses the values programmed in ADC_TR1 and ADC_HR1 registers. It is cleared by software by programming it to 1."}
	}
	AWD2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 2 flag
This bit is set by hardware when the converted voltage crosses the values programmed in ADC_AWD2TR and ADC_AWD2TR registers. It is cleared by software programming it it."}
	}
	AWD3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 3 flag
This bit is set by hardware when the converted voltage crosses the values programmed in ADC_AWD3TR and ADC_AWD3TR registers. It is cleared by software by programming it to 1."}
	}
	EOCAL {
	(flecs.doc.Description, flecs.doc.Brief) : {"End Of Calibration flag
This bit is set by hardware when calibration is complete. It is cleared by software writing 1 to it."}
	}
	CCRDY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel Configuration Ready flag
This flag bit is set by hardware when the channel configuration is applied after programming to ADC_CHSELR register or changing CHSELRMOD or SCANDIR. It is cleared by software by programming it to it.
Note: When the software configures the channels (by programming ADC_CHSELR or changing CHSELRMOD or SCANDIR), it must wait until the CCRDY flag rises before configuring again or starting conversions, otherwise the new configuration (or the START bit) is ignored. Once the flag is asserted, if the software needs to configure again the channels, it must clear the CCRDY flag before proceeding with a new configuration."}
	}
}

ADC_IER {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC interrupt enable register "}
	ADRDYIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC ready interrupt enable
This bit is set and cleared by software to enable/disable the ADC Ready interrupt.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	EOSMPIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of sampling flag interrupt enable
This bit is set and cleared by software to enable/disable the end of the sampling phase interrupt.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	EOCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of conversion interrupt enable
This bit is set and cleared by software to enable/disable the end of conversion interrupt.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	EOSIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of conversion sequence interrupt enable
This bit is set and cleared by software to enable/disable the end of sequence of conversions interrupt.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	OVRIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Overrun interrupt enable
This bit is set and cleared by software to enable/disable the overrun interrupt.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	AWD1IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 1 interrupt enable
This bit is set and cleared by software to enable/disable the analog watchdog interrupt.
Note: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	AWD2IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 2 interrupt enable
This bit is set and cleared by software to enable/disable the analog watchdog interrupt.
Note: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	AWD3IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 3 interrupt enable
This bit is set and cleared by software to enable/disable the analog watchdog interrupt.
Note: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	EOCALIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of calibration interrupt enable
This bit is set and cleared by software to enable/disable the end of calibration interrupt.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	CCRDYIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel Configuration Ready Interrupt enable
This bit is set and cleared by software to enable/disable the channel configuration ready interrupt.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
}

ADC_CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC control register"}
	ADEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC enable command
This bit is set by software to enable the ADC. The ADC is effectively ready to operate once the ADRDY flag has been set.
It is cleared by hardware when the ADC is disabled, after the execution of the ADDIS command.
Note: The software is allowed to set ADEN only when all bits of ADC_CR registers are 0 (ADCAL=0, ADSTP=0, ADSTART=0, ADDIS=0 and ADEN=0)"}
	}
	ADDIS {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC disable command
This bit is set by software to disable the ADC (ADDIS command) and put it into power-down state (OFF state).
It is cleared by hardware once the ADC is effectively disabled (ADEN is also cleared by hardware at this time).
Note: Setting ADDIS to '1' is only effective when ADEN=1 and ADSTART=0 (which ensures that no conversion is ongoing)"}
	}
	ADSTART {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC start conversion command
This bit is set by software to start ADC conversion. Depending on the EXTEN [1:0] configuration bits, a conversion either starts immediately (software trigger configuration) or once a hardware trigger event occurs (hardware trigger configuration).
It is cleared by hardware:
In single conversion mode (CONT=0, DISCEN=0), when software trigger is selected (EXTEN=00): at the assertion of the end of Conversion Sequence (EOS) flag.
In discontinuous conversion mode(CONT=0, DISCEN=1), when the software trigger is selected (EXTEN=00): at the assertion of the end of Conversion (EOC) flag.
In all other cases: after the execution of the ADSTP command, at the same time as the ADSTP bit is cleared by hardware.
Note: The software is allowed to set ADSTART only when ADEN=1 and ADDIS=0 (ADC is enabled and there is no pending request to disable the ADC).
After writing to ADC_CHSELR register or changing CHSELRMOD or SCANDIRW, it is mandatory to wait until CCRDY flag is asserted before setting ADSTART, otherwise, the value written to ADSTART is ignored."}
	}
	ADSTP {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC stop conversion command
This bit is set by software to stop and discard an ongoing conversion (ADSTP Command).
It is cleared by hardware when the conversion is effectively discarded and the ADC is ready to accept a new start conversion command.
Note: Setting ADSTP to '1' is only effective when ADSTART=1 and ADDIS=0 (ADC is enabled and may be converting and there is no pending request to disable the ADC)"}
	}
	ADVREGEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC Voltage Regulator Enable
This bit is set by software, to enable the ADC internal voltage regulator. The voltage regulator output is available after tADCVREG_SETUP.
It is cleared by software to disable the voltage regulator. It can be cleared only if ADEN is et to 0.
Note: The software is allowed to program this bit field only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0)."}
	}
	ADCAL {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC calibration
This bit is set by software to start the calibration of the ADC.
It is cleared by hardware after calibration is complete.
Note: The software is allowed to set ADCAL only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0).
The software is allowed to update the calibration factor by writing ADC_CALFACT only when ADEN=1 and ADSTART=0 (ADC enabled and no conversion is ongoing)."}
	}
}

ADC_CFGR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC configuration register 1"}
	DMAEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Direct memory access enable
This bit is set and cleared by software to enable the generation of DMA requests. This allows the DMA controller to be used to manage automatically the converted data. For more details, refer to .
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	DMACFG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Direct memory access configuration
This bit is set and cleared by software to select between two DMA modes of operation and is effective only when DMAEN=1.
For more details, refer to page351
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	SCANDIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Scan sequence direction
This bit is set and cleared by software to select the direction in which the channels is scanned in the sequence. It is effective only if CHSELMOD bit is cleared to 0.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	RES {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data resolution
These bits are written by software to select the resolution of the conversion.
Note: The software is allowed to write these bits only when ADEN=0."}
	}
	ALIGN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data alignment
This bit is set and cleared by software to select right or left alignment. Refer to Data alignment and resolution (oversampling disabled: OVSE = 0) on page349
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	EXTSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger selection
These bits select the external event used to trigger the start of conversion (refer to External triggers for details):
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	EXTEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger enable and polarity selection
These bits are set and cleared by software to select the external trigger polarity and enable the trigger.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	OVRMOD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Overrun management mode
This bit is set and cleared by software and configure the way data overruns are managed.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	CONT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Single / continuous conversion mode
This bit is set and cleared by software. If it is set, conversion takes place continuously until it is cleared.
Note: It is not possible to have both discontinuous mode and continuous mode enabled: it is forbidden to set both bits DISCEN=1 and CONT=1.
The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	WAIT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wait conversion mode
This bit is set and cleared by software to enable/disable wait conversion mode..
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	AUTOFF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto-off mode
This bit is set and cleared by software to enable/disable auto-off mode..
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	DISCEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Discontinuous mode
This bit is set and cleared by software to enable/disable discontinuous mode.
Note: It is not possible to have both discontinuous mode and continuous mode enabled: it is forbidden to set both bits DISCEN=1 and CONT=1.
The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	CHSELRMOD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Mode selection of the ADC_CHSELR register
This bit is set and cleared by software to control the ADC_CHSELR feature:
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	AWD1SGL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Enable the watchdog on a single channel or on all channels
This bit is set and cleared by software to enable the analog watchdog on the channel identified by the AWDCH[4:0] bits or on all the channels
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	AWD1EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog enable
This bit is set and cleared by software.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	AWD1CH {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They select the input channel to be guarded by the analog watchdog.
.....
Others: Reserved
Note: The channel selected by the AWDCH[4:0] bits must be also set into the CHSELR register.
The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
}

ADC_CFGR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC configuration register 2"}
	OVSE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Oversampler Enable
This bit is set and cleared by software.
Note: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	OVSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Oversampling ratio
This bit filed defines the number of oversampling ratio.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	OVSS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Oversampling shift
This bit is set and cleared by software.
Others: Reserved
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	TOVS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Triggered Oversampling
This bit is set and cleared by software.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	LFTRIG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low frequency trigger mode enable
This bit is set and cleared by software.
Note: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."}
	}
	CKMODE {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC clock mode
These bits are set and cleared by software to define how the analog ADC is clocked:
In all synchronous clock modes, there is no jitter in the delay from a timer trigger to the start of a conversion.
Note: The software is allowed to write these bits only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0)."}
	}
}

ADC_SMPR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC sampling time register"}
	SMP1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Sampling time selection 1
These bits are written by software to select the sampling time that applies to all channels.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMP2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Sampling time selection 2
These bits are written by software to select the sampling time that applies to all channels.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL16 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL17 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SMPSEL18 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x sampling time selection
These bits are written by software to define which sampling time is used.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
}

ADC_AWD1TR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC watchdog threshold register"}
	LT1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 1 lower threshold
These bits are written by software to define the lower threshold for the analog watchdog.
Refer to ADC_AWDxTR) on page355."}
	}
	HT1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 1 higher threshold
These bits are written by software to define the higher threshold for the analog watchdog.
Refer to ADC_AWDxTR) on page355."}
	}
}

ADC_AWD2TR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC watchdog threshold register"}
	LT2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 2 lower threshold
These bits are written by software to define the lower threshold for the analog watchdog.
Refer to ADC_AWDxTR) on page355."}
	}
	HT2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 2 higher threshold
These bits are written by software to define the higher threshold for the analog watchdog.
Refer to ADC_AWDxTR) on page355."}
	}
}

ADC_CHSELR_0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC channel selection register [alternate] "}
	CHSEL0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL16 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL17 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
	CHSEL18 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel-x selection
These bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).
If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."}
	}
}

ADC_CHSELR_1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"channel selection register CHSELRMOD = 1 in
            ADC_CFGR1"}
	SQ1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"1st conversion of the sequence
These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.
When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.
Refer to SQ8[3:0] for a definition of channel selection.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SQ2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"2nd conversion of the sequence
These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.
When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.
Refer to SQ8[3:0] for a definition of channel selection.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SQ3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"3rd conversion of the sequence
These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.
When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.
Refer to SQ8[3:0] for a definition of channel selection.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SQ4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"4th conversion of the sequence
These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.
When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.
Refer to SQ8[3:0] for a definition of channel selection.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SQ5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"5th conversion of the sequence
These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.
When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.
Refer to SQ8[3:0] for a definition of channel selection.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SQ6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"6th conversion of the sequence
These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.
When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.
Refer to SQ8[3:0] for a definition of channel selection.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SQ7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"7th conversion of the sequence
These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.
When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.
Refer to SQ8[3:0] for a definition of channel selection.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	SQ8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"8th conversion of the sequence
These bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates the end of the sequence.
When 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.
...
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
}

ADC_AWD3TR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC watchdog threshold register"}
	LT3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 3lower threshold
These bits are written by software to define the lower threshold for the analog watchdog.
Refer to ADC_AWDxTR) on page355."}
	}
	HT3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog 3 higher threshold
These bits are written by software to define the higher threshold for the analog watchdog.
Refer to ADC_AWDxTR) on page355."}
	}
}

ADC_DR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC data register"}
	DATA {
	(flecs.doc.Description, flecs.doc.Brief) : {"Converted data
These bits are read-only. They contain the conversion result from the last converted channel. The data are left- or right-aligned as shown in OVSE = 0) on page349.
Just after a calibration is complete, DATA[6:0] contains the calibration factor."}
	}
}

ADC_AWD2CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC Analog Watchdog 2 Configuration register"}
	AWD2CH0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH16 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH17 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD2CH18 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).
Note: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
}

ADC_AWD3CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC Analog Watchdog 3 Configuration register"}
	AWD3CH0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH16 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH17 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	AWD3CH18 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog watchdog channel selection
These bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).
Note: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
}

ADC_CALFACT {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC Calibration factor"}
	CALFACT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Calibration factor
These bits are written by hardware or by software.
Once a calibration is complete,they are updated by hardware with the calibration factors.
Software can write these bits with a new calibration factor. If the new calibration factor is different from the current one stored into the analog ADC, it is then applied once a new calibration is launched.
Just after a calibration is complete, DATA[6:0] contains the calibration factor.
Note: Software can write these bits only when ADEN=1 (ADC is enabled and no calibration is ongoing and no conversion is ongoing). Refer to SQ8[3:0] for a definition of channel selection."}
	}
}

ADC_CCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC common configuration register"}
	PRESC {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC prescaler
Set and cleared by software to select the frequency of the clock to the ADC.
Other: Reserved
Note: Software is allowed to write these bits only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0)."}
	}
	VREFEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"VREFINT enable
This bit is set and cleared by software to enable/disable the VREFINT.
Note: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	TSEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Temperature sensor enable
This bit is set and cleared by software to enable/disable the temperature sensor.
Note: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."}
	}
	VBATEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"VBAT enable
This bit is set and cleared by software to enable/disable the VBAT channel.
Note: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)"}
	}
}

IWDG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Independent watchdog"}
}
module IWDG
KR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Key register"}
	KEY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Key value (write only, read
              0x0000)"}
	}
}

PR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prescaler register"}
	PR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prescaler divider"}
	}
}

RLR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Reload register"}
	RL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Watchdog counter reload
              value"}
	}
}

SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Status register"}
	WVU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Watchdog counter window value
              update"}
	}
	RVU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Watchdog counter reload value
              update"}
	}
	PVU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Watchdog prescaler value
              update"}
	}
}

WINR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Window register"}
	WIN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Watchdog counter window
              value"}
	}
}

WWDG {
	(flecs.doc.Description, flecs.doc.Brief) : {"System window watchdog"}
}
module WWDG
CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Control register"}
	WDGA {
	(flecs.doc.Description, flecs.doc.Brief) : {"Activation bit"}
	}
	T {
	(flecs.doc.Description, flecs.doc.Brief) : {"7-bit counter (MSB to LSB)"}
	}
}

CFR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Configuration register"}
	WDGTB {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timer base"}
	}
	EWI {
	(flecs.doc.Description, flecs.doc.Brief) : {"Early wakeup interrupt"}
	}
	W {
	(flecs.doc.Description, flecs.doc.Brief) : {"7-bit window value"}
	}
}

SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Status register"}
	EWIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Early wakeup interrupt
              flag"}
	}
}

FLASH {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash"}
}
module FLASH
ACR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Access control register"}
	LATENCY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Latency"}
	}
	PRFTEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prefetch enable"}
	}
	ICEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Instruction cache enable"}
	}
	ICRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Instruction cache reset"}
	}
	EMPTY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash User area empty"}
	}
}

KEYR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash key register"}
	KEYR {
	(flecs.doc.Description, flecs.doc.Brief) : {"KEYR"}
	}
}

OPTKEYR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Option byte key register"}
	OPTKEYR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Option byte key"}
	}
}

SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Status register"}
	EOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of operation"}
	}
	OPERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Operation error"}
	}
	PROGERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Programming error"}
	}
	WRPERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Write protected error"}
	}
	PGAERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Programming alignment
              error"}
	}
	SIZERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Size error"}
	}
	PGSERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Programming sequence error"}
	}
	MISERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Fast programming data miss
              error"}
	}
	FASTERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Fast programming error"}
	}
	OPTVERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Option and Engineering bits loading
              validity error"}
	}
	BSY1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"BSY1"}
	}
	BSY2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"BSY2"}
	}
	CFGBSY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Programming or erase configuration
              busy."}
	}
}

CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash control register"}
	PG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Programming"}
	}
	PER {
	(flecs.doc.Description, flecs.doc.Brief) : {"Page erase"}
	}
	MER1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Mass erase"}
	}
	PNB {
	(flecs.doc.Description, flecs.doc.Brief) : {"Page number"}
	}
	BKER {
	(flecs.doc.Description, flecs.doc.Brief) : {"BKER"}
	}
	MER2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"MER2"}
	}
	STRT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Start"}
	}
	OPTSTRT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Options modification start"}
	}
	FSTPG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Fast programming"}
	}
	EOPIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of operation interrupt
              enable"}
	}
	ERRIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Error interrupt enable"}
	}
	OBL_LAUNCH {
	(flecs.doc.Description, flecs.doc.Brief) : {"Force the option byte
              loading"}
	}
	OPTLOCK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Options Lock"}
	}
	LOCK {
	(flecs.doc.Description, flecs.doc.Brief) : {"FLASH_CR Lock"}
	}
}

ECCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash ECC register"}
	ADDR_ECC {
	(flecs.doc.Description, flecs.doc.Brief) : {"ECC fail address"}
	}
	SYSF_ECC {
	(flecs.doc.Description, flecs.doc.Brief) : {"ECC fail for Corrected ECC Error or
              Double ECC Error in info block"}
	}
	ECCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"ECC correction interrupt
              enable"}
	}
	ECCC {
	(flecs.doc.Description, flecs.doc.Brief) : {"ECC correction"}
	}
	ECCD {
	(flecs.doc.Description, flecs.doc.Brief) : {"ECC detection"}
	}
}

OPTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash option register"}
	RDP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Read protection level"}
	}
	nRST_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"nRST_STOP"}
	}
	nRST_STDBY {
	(flecs.doc.Description, flecs.doc.Brief) : {"nRST_STDBY"}
	}
	IDWG_SW {
	(flecs.doc.Description, flecs.doc.Brief) : {"Independent watchdog
              selection"}
	}
	IWDG_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Independent watchdog counter freeze in
              Stop mode"}
	}
	IWDG_STDBY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Independent watchdog counter freeze in
              Standby mode"}
	}
	WWDG_SW {
	(flecs.doc.Description, flecs.doc.Brief) : {"Window watchdog selection"}
	}
	nSWAP_BANK {
	(flecs.doc.Description, flecs.doc.Brief) : {"nSWAP_BANK"}
	}
	DUAL_BANK {
	(flecs.doc.Description, flecs.doc.Brief) : {"DUAL_BANK"}
	}
	RAM_PARITY_CHECK {
	(flecs.doc.Description, flecs.doc.Brief) : {"SRAM parity check control"}
	}
	nBOOT_SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"nBOOT_SEL"}
	}
	nBOOT1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Boot configuration"}
	}
	nBOOT0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"nBOOT0 option bit"}
	}
}

WRP1AR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash WRP area A address
          register"}
	WRP1A_STRT {
	(flecs.doc.Description, flecs.doc.Brief) : {"WRP area A start offset"}
	}
	WRP1A_END {
	(flecs.doc.Description, flecs.doc.Brief) : {"WRP area A end offset"}
	}
}

WRP1BR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash WRP area B address
          register"}
	WRP1B_STRT {
	(flecs.doc.Description, flecs.doc.Brief) : {"WRP area B start offset"}
	}
	WRP1B_END {
	(flecs.doc.Description, flecs.doc.Brief) : {"WRP area B end offset"}
	}
}

WRP2AR {
	(flecs.doc.Description, flecs.doc.Brief) : {"FLASH WRP2 area A address register"}
	WRP2A_STRT {
	(flecs.doc.Description, flecs.doc.Brief) : {"WRP2A_STRT"}
	}
	WRP2A_END {
	(flecs.doc.Description, flecs.doc.Brief) : {"WRP2A_END"}
	}
}

WRP2BR {
	(flecs.doc.Description, flecs.doc.Brief) : {"FLASH WRP2 area B address register"}
	WRP2B_STRT {
	(flecs.doc.Description, flecs.doc.Brief) : {"WRP2B_STRT"}
	}
	WRP2B_END {
	(flecs.doc.Description, flecs.doc.Brief) : {"WRP2B_END"}
	}
}

RCC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Reset and clock control"}
}
module RCC
CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock control register"}
	HSION {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI16 clock enable"}
	}
	HSIKERON {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI16 always enable for peripheral
              kernels"}
	}
	HSIRDY {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI16 clock ready flag"}
	}
	HSIDIV {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI16 clock division
              factor"}
	}
	HSEON {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSE clock enable"}
	}
	HSERDY {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSE clock ready flag"}
	}
	HSEBYP {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSE crystal oscillator
              bypass"}
	}
	CSSON {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock security system
              enable"}
	}
	PLLON {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL enable"}
	}
	PLLRDY {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL clock ready flag"}
	}
}

ICSCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal clock sources calibration
          register"}
	HSICAL {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI16 clock calibration"}
	}
	HSITRIM {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI16 clock trimming"}
	}
}

CFGR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock configuration register"}
	MCOPRE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Microcontroller clock output
              prescaler"}
	}
	MCOSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Microcontroller clock
              output"}
	}
	MCO2PRE {
	(flecs.doc.Description, flecs.doc.Brief) : {"MCO2PRE"}
	}
	MCO2SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"MCO2SEL"}
	}
	PPRE {
	(flecs.doc.Description, flecs.doc.Brief) : {"APB prescaler"}
	}
	HPRE {
	(flecs.doc.Description, flecs.doc.Brief) : {"AHB prescaler"}
	}
	SWS {
	(flecs.doc.Description, flecs.doc.Brief) : {"System clock switch status"}
	}
	SW {
	(flecs.doc.Description, flecs.doc.Brief) : {"System clock switch"}
	}
}

PLLSYSCFGR {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL configuration register"}
	PLLSRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL input clock source"}
	}
	PLLM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Division factor M of the PLL input clock
              divider"}
	}
	PLLN {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL frequency multiplication factor
              N"}
	}
	PLLPEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLLPCLK clock output
              enable"}
	}
	PLLP {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL VCO division factor P for PLLPCLK
              clock output"}
	}
	PLLQEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLLQCLK clock output
              enable"}
	}
	PLLQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL VCO division factor Q for PLLQCLK
              clock output"}
	}
	PLLREN {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLLRCLK clock output
              enable"}
	}
	PLLR {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL VCO division factor R for PLLRCLK
              clock output"}
	}
}

CIER {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock interrupt enable
          register"}
	LSIRDYIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSI ready interrupt enable"}
	}
	LSERDYIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE ready interrupt enable"}
	}
	HSIRDYIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI ready interrupt enable"}
	}
	HSERDYIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSE ready interrupt enable"}
	}
	PLLSYSRDYIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL ready interrupt enable"}
	}
}

CIFR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock interrupt flag register"}
	LSIRDYF {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSI ready interrupt flag"}
	}
	LSERDYF {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE ready interrupt flag"}
	}
	HSIRDYF {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI ready interrupt flag"}
	}
	HSERDYF {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSE ready interrupt flag"}
	}
	PLLSYSRDYF {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL ready interrupt flag"}
	}
	CSSF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock security system interrupt
              flag"}
	}
	LSECSSF {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE Clock security system interrupt
              flag"}
	}
}

CICR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock interrupt clear register"}
	LSIRDYC {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSI ready interrupt clear"}
	}
	LSERDYC {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE ready interrupt clear"}
	}
	HSIRDYC {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSI ready interrupt clear"}
	}
	HSERDYC {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSE ready interrupt clear"}
	}
	PLLSYSRDYC {
	(flecs.doc.Description, flecs.doc.Brief) : {"PLL ready interrupt clear"}
	}
	CSSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock security system interrupt
              clear"}
	}
	LSECSSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE Clock security system interrupt
              clear"}
	}
}

IOPRSTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port reset register"}
	GPIOARST {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIOARST"}
	}
	GPIOBRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIOBRST"}
	}
	GPIOCRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIOCRST"}
	}
	GPIODRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIODRST"}
	}
	GPIOERST {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIOERST"}
	}
	GPIOFRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIOFRST"}
	}
}

AHBRSTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"AHB peripheral reset register"}
	DMA1RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1 reset"}
	}
	DMA2RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1 reset"}
	}
	FLASHRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"FLITF reset"}
	}
	CRCRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"CRC reset"}
	}
}

APBRSTR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"APB peripheral reset register
          1"}
	TIM3RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM3 timer reset"}
	}
	TIM4RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM4 timer reset"}
	}
	TIM6RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM6 timer reset"}
	}
	TIM7RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM7 timer reset"}
	}
	USART5RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART5RST"}
	}
	USART6RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART6RST"}
	}
	USBRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"USBRST"}
	}
	SPI2RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI2 reset"}
	}
	SPI3RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI3 reset"}
	}
	USART2RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART2 reset"}
	}
	USART3RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART3 reset"}
	}
	USART4RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART4 reset"}
	}
	I2C1RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C1 reset"}
	}
	I2C2RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C2 reset"}
	}
	I2C3RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C3RST reset"}
	}
	DBGRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Debug support reset"}
	}
	PWRRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power interface reset"}
	}
}

APBRSTR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"APB peripheral reset register
          2"}
	SYSCFGRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"SYSCFG, COMP and VREFBUF
              reset"}
	}
	TIM1RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1 timer reset"}
	}
	SPI1RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI1 reset"}
	}
	USART1RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART1 reset"}
	}
	TIM14RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM14 timer reset"}
	}
	TIM15RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM15 timer reset"}
	}
	TIM16RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM16 timer reset"}
	}
	TIM17RST {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM17 timer reset"}
	}
	ADCRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC reset"}
	}
}

IOPENR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO clock enable register"}
	GPIOAEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port A clock enable during Sleep
              mode"}
	}
	GPIOBEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port B clock enable during Sleep
              mode"}
	}
	GPIOCEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port C clock enable during Sleep
              mode"}
	}
	GPIODEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port D clock enable during Sleep
              mode"}
	}
	GPIOEEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port E clock enable during Sleep
              mode"}
	}
	GPIOFEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port F clock enable during Sleep
              mode"}
	}
}

AHBENR {
	(flecs.doc.Description, flecs.doc.Brief) : {"AHB peripheral clock enable
          register"}
	DMA1EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1 clock enable"}
	}
	DMA2EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA2 clock enable"}
	}
	FLASHEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash memory interface clock
              enable"}
	}
	CRCEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"CRC clock enable"}
	}
}

APBENR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"APB peripheral clock enable register
          1"}
	TIM3EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM3 timer clock enable"}
	}
	TIM4EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM4 timer clock enable"}
	}
	TIM6EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM6 timer clock enable"}
	}
	TIM7EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM7 timer clock enable"}
	}
	USART5EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART5EN"}
	}
	USART6EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART6EN"}
	}
	RTCAPBEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC APB clock enable"}
	}
	WWDGEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"WWDG clock enable"}
	}
	USBEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USBEN"}
	}
	SPI2EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI2 clock enable"}
	}
	SPI3EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI3 clock enable"}
	}
	USART2EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART2 clock enable"}
	}
	USART3EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART3 clock enable"}
	}
	USART4EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART4 clock enable"}
	}
	I2C1EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C1 clock enable"}
	}
	I2C2EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C2 clock enable"}
	}
	I2C3EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C3 clock enable"}
	}
	DBGEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Debug support clock enable"}
	}
	PWREN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power interface clock
              enable"}
	}
}

APBENR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"APB peripheral clock enable register
          2"}
	SYSCFGEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SYSCFG, COMP and VREFBUF clock
              enable"}
	}
	TIM1EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1 timer clock enable"}
	}
	SPI1EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI1 clock enable"}
	}
	USART1EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART1 clock enable"}
	}
	TIM14EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM14 timer clock enable"}
	}
	TIM15EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM15 timer clock enable"}
	}
	TIM16EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM16 timer clock enable"}
	}
	TIM17EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM16 timer clock enable"}
	}
	ADCEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC clock enable"}
	}
}

IOPSMENR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO in Sleep mode clock enable
          register"}
	GPIOASMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port A clock enable during Sleep
              mode"}
	}
	GPIOBSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port B clock enable during Sleep
              mode"}
	}
	GPIOCSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port C clock enable during Sleep
              mode"}
	}
	GPIODSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port D clock enable during Sleep
              mode"}
	}
	GPIOESMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port E clock enable during Sleep
              mode"}
	}
	GPIOFSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O port F clock enable during Sleep
              mode"}
	}
}

AHBSMENR {
	(flecs.doc.Description, flecs.doc.Brief) : {"AHB peripheral clock enable in Sleep mode
          register"}
	DMA1SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1 clock enable during Sleep
              mode"}
	}
	DMA2SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA2 clock enable during Sleep
              mode"}
	}
	FLASHSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash memory interface clock enable
              during Sleep mode"}
	}
	SRAMSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SRAM clock enable during Sleep
              mode"}
	}
	CRCSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"CRC clock enable during Sleep
              mode"}
	}
}

APBSMENR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"APB peripheral clock enable in Sleep mode
          register 1"}
	TIM3SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM3 timer clock enable during Sleep
              mode"}
	}
	TIM4SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM4 timer clock enable during Sleep
              mode"}
	}
	TIM6SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM6 timer clock enable during Sleep
              mode"}
	}
	TIM7SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM7 timer clock enable during Sleep
              mode"}
	}
	USART5SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART5 clock enable"}
	}
	USART6SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART6 clock enable"}
	}
	RTCAPBSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC APB clock enable during Sleep
              mode"}
	}
	WWDGSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"WWDG clock enable during Sleep
              mode"}
	}
	USBSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USB clock enable during Sleep
              mode"}
	}
	SPI2SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI2 clock enable during Sleep
              mode"}
	}
	SPI3SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI3 clock enable during Sleep
              mode"}
	}
	USART2SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART2 clock enable during Sleep
              mode"}
	}
	USART3SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART3 clock enable during Sleep
              mode"}
	}
	USART4SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART4 clock enable during Sleep
              mode"}
	}
	I2C1SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C1 clock enable during Sleep
              mode"}
	}
	I2C2SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C2 clock enable during Sleep
              mode"}
	}
	I2C3SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C3 clock enable during Sleep
              mode"}
	}
	DBGSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Debug support clock enable during Sleep
              mode"}
	}
	PWRSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power interface clock enable during
              Sleep mode"}
	}
}

APBSMENR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"APB peripheral clock enable in Sleep mode
          register 2"}
	SYSCFGSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SYSCFG, COMP and VREFBUF clock enable
              during Sleep mode"}
	}
	TIM1SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1 timer clock enable during Sleep
              mode"}
	}
	SPI1SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI1 clock enable during Sleep
              mode"}
	}
	USART1SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART1 clock enable during Sleep
              mode"}
	}
	TIM14SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM14 timer clock enable during Sleep
              mode"}
	}
	TIM15SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM15 timer clock enable during Sleep
              mode"}
	}
	TIM16SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM16 timer clock enable during Sleep
              mode"}
	}
	TIM17SMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM16 timer clock enable during Sleep
              mode"}
	}
	ADCSMEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC clock enable during Sleep
              mode"}
	}
}

CCIPR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Peripherals independent clock configuration
          register"}
	USART1SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART1 clock source
              selection"}
	}
	USART2SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART2 clock source
              selection"}
	}
	USART3SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART3 clock source
              selection"}
	}
	I2C1SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C1 clock source
              selection"}
	}
	I2S2SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2S1 clock source
              selection"}
	}
	TIM1SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1 clock source
              selection"}
	}
	TIM15SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM15 clock source
              selection"}
	}
	ADCSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADCs clock source
              selection"}
	}
}

CCIPR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Peripherals independent clock configuration register 2"}
	I2S1SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"2S1SEL"}
	}
	I2S2SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2S2SEL"}
	}
	USBSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"USBSEL"}
	}
}

BDCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC domain control register"}
	LSEON {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE oscillator enable"}
	}
	LSERDY {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE oscillator ready"}
	}
	LSEBYP {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE oscillator bypass"}
	}
	LSEDRV {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE oscillator drive
              capability"}
	}
	LSECSSON {
	(flecs.doc.Description, flecs.doc.Brief) : {"CSS on LSE enable"}
	}
	LSECSSD {
	(flecs.doc.Description, flecs.doc.Brief) : {"CSS on LSE failure
              Detection"}
	}
	RTCSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC clock source selection"}
	}
	RTCEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC clock enable"}
	}
	BDRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC domain software reset"}
	}
	LSCOEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low-speed clock output (LSCO)
              enable"}
	}
	LSCOSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low-speed clock output
              selection"}
	}
}

CSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Control/status register"}
	LSION {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSI oscillator enable"}
	}
	LSIRDY {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSI oscillator ready"}
	}
	RMVF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Remove reset flags"}
	}
	OBLRSTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Option byte loader reset
              flag"}
	}
	PINRSTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Pin reset flag"}
	}
	PWRRSTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"BOR or POR/PDR flag"}
	}
	SFTRSTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software reset flag"}
	}
	IWDGRSTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Independent window watchdog reset
              flag"}
	}
	WWDGRSTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Window watchdog reset flag"}
	}
	LPWRRSTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low-power reset flag"}
	}
}

PWR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power control"}
}
module PWR
CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power control register 1"}
	LPR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low-power run"}
	}
	VOS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Voltage scaling range
              selection"}
	}
	DBP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Disable backup domain write
              protection"}
	}
	FPD_LPSLP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash memory powered down during
              Low-power sleep mode"}
	}
	FPD_LPRUN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash memory powered down during
              Low-power run mode"}
	}
	FPD_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash memory powered down during Stop
              mode"}
	}
	LPMS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low-power mode selection"}
	}
}

CR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power control register 2"}
	USV {
	(flecs.doc.Description, flecs.doc.Brief) : {"USV"}
	}
}

CR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power control register 3"}
	EWUP1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Enable Wakeup pin WKUP1"}
	}
	EWUP2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Enable Wakeup pin WKUP2"}
	}
	EWUP3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Enable Wakeup pin WKUP3"}
	}
	EWUP4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Enable Wakeup pin WKUP4"}
	}
	EWUP5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Enable WKUP5 wakeup pin"}
	}
	EWUP6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Enable WKUP6 wakeup pin"}
	}
	APC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Apply pull-up and pull-down
              configuration"}
	}
	EIWUL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Enable internal wakeup
              line"}
	}
}

CR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power control register 4"}
	WP1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup pin WKUP1 polarity"}
	}
	WP2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup pin WKUP2 polarity"}
	}
	WP3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup pin WKUP3 polarity"}
	}
	WP4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup pin WKUP4 polarity"}
	}
	WP5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup pin WKUP5 polarity"}
	}
	WP6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"WKUP6 wakeup pin polarity"}
	}
	VBE {
	(flecs.doc.Description, flecs.doc.Brief) : {"VBAT battery charging
              enable"}
	}
	VBRS {
	(flecs.doc.Description, flecs.doc.Brief) : {"VBAT battery charging resistor
              selection"}
	}
}

SR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power status register 1"}
	WUF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup flag 1"}
	}
	WUF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup flag 2"}
	}
	WUF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup flag 3"}
	}
	WUF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup flag 4"}
	}
	WUF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup flag 5"}
	}
	WUF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup flag 6"}
	}
	SBF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Standby flag"}
	}
	WUFI {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup flag internal"}
	}
}

SR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power status register 2"}
	VOSF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Voltage scaling flag"}
	}
	REGLPF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low-power regulator flag"}
	}
	REGLPS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low-power regulator
              started"}
	}
	FLASH_RDY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Flash ready flag"}
	}
}

SCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power status clear register"}
	CSBF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear standby flag"}
	}
	CWUF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear wakeup flag 6"}
	}
	CWUF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear wakeup flag 5"}
	}
	CWUF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear wakeup flag 4"}
	}
	CWUF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear wakeup flag 3"}
	}
	CWUF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear wakeup flag 2"}
	}
	CWUF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear wakeup flag 1"}
	}
}

PUCRA {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port A pull-up control
          register"}
	PU15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
	PU0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-up bit y
              (y=0..15)"}
	}
}

PDCRA {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port A pull-down control
          register"}
	PD15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
	PD0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port A pull-down bit y
              (y=0..15)"}
	}
}

PUCRB {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port B pull-up control
          register"}
	PU15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
	PU0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-up bit y
              (y=0..15)"}
	}
}

PDCRB {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port B pull-down control
          register"}
	PD15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
	PD0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port B pull-down bit y
              (y=0..15)"}
	}
}

PUCRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port C pull-up control
          register"}
	PU15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
	PU0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-up bit y
              (y=0..15)"}
	}
}

PDCRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port C pull-down control
          register"}
	PD15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
	PD0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port C pull-down bit y
              (y=0..15)"}
	}
}

PUCRD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port D pull-up control
          register"}
	PU15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
	PU0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-up bit y
              (y=0..15)"}
	}
}

PDCRD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port D pull-down control
          register"}
	PD15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
	PD0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port D pull-down bit y
              (y=0..15)"}
	}
}

PUCRE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port E pull-UP control
          register"}
	PU15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
	PU0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-up bit y
              (y=0..15)"}
	}
}

PDCRE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port E pull-down control
          register"}
	PD15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
	PD0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port E pull-down bit y
              (y=0..15)"}
	}
}

PUCRF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port F pull-up control
          register"}
	PU13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
	PU0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-up bit y
              (y=0..15)"}
	}
}

PDCRF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Power Port F pull-down control
          register"}
	PD13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
	PD0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port F pull-down bit y
              (y=0..15)"}
	}
}

DMA1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA controller"}
}
module DMA1
DMA_ISR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA interrupt status register "}
	GIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag for channel 1"}
	}
	TCIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete (TC) flag for channel 1"}
	}
	HTIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer (HT) flag for channel 1"}
	}
	TEIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error (TE) flag for channel 1"}
	}
	GIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag for channel 2"}
	}
	TCIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete (TC) flag for channel 2"}
	}
	HTIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer (HT) flag for channel 2"}
	}
	TEIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error (TE) flag for channel 2"}
	}
	GIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag for channel 3"}
	}
	TCIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete (TC) flag for channel 3"}
	}
	HTIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer (HT) flag for channel 3"}
	}
	TEIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error (TE) flag for channel 3"}
	}
	GIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag for channel 4"}
	}
	TCIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete (TC) flag for channel 4"}
	}
	HTIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer (HT) flag for channel 4"}
	}
	TEIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error (TE) flag for channel 4"}
	}
	GIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag for channel 5"}
	}
	TCIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete (TC) flag for channel 5"}
	}
	HTIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer (HT) flag for channel 5"}
	}
	TEIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error (TE) flag for channel 5"}
	}
	GIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag for channel 6"}
	}
	TCIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete (TC) flag for channel 6"}
	}
	HTIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer (HT) flag for channel 6"}
	}
	TEIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error (TE) flag for channel 6"}
	}
	GIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag for channel 7"}
	}
	TCIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete (TC) flag for channel 7"}
	}
	HTIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer (HT) flag for channel 7"}
	}
	TEIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error (TE) flag for channel 7"}
	}
}

DMA_IFCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA interrupt flag clear register "}
	CGIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag clear for channel 1"}
	}
	CTCIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete flag clear for channel 1"}
	}
	CHTIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer flag clear for channel 1"}
	}
	CTEIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error flag clear for channel 1"}
	}
	CGIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag clear for channel 2"}
	}
	CTCIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete flag clear for channel 2"}
	}
	CHTIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer flag clear for channel 2"}
	}
	CTEIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error flag clear for channel 2"}
	}
	CGIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag clear for channel 3"}
	}
	CTCIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete flag clear for channel 3"}
	}
	CHTIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer flag clear for channel 3"}
	}
	CTEIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error flag clear for channel 3"}
	}
	CGIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag clear for channel 4"}
	}
	CTCIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete flag clear for channel 4"}
	}
	CHTIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer flag clear for channel 4"}
	}
	CTEIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error flag clear for channel 4"}
	}
	CGIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag clear for channel 5"}
	}
	CTCIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete flag clear for channel 5"}
	}
	CHTIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer flag clear for channel 5"}
	}
	CTEIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error flag clear for channel 5"}
	}
	CGIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag clear for channel 6"}
	}
	CTCIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete flag clear for channel 6"}
	}
	CHTIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer flag clear for channel 6"}
	}
	CTEIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error flag clear for channel 6"}
	}
	CGIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"global interrupt flag clear for channel 7"}
	}
	CTCIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete flag clear for channel 7"}
	}
	CHTIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer flag clear for channel 7"}
	}
	CTEIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error flag clear for channel 7"}
	}
}

DMA_CCR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel 1 configuration register"}
	EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"channel enable
When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).
Note: this bit is set and cleared by software."}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	HTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	TEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"data transfer direction
This bit must be set only in memory-to-peripheral and peripheral-to-memory modes.
Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	CIRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"circular mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	PINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral increment mode
Defines the increment mode for each DMA transfer to the identified peripheral.
n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory increment mode
Defines the increment mode for each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral size
Defines the data size of each DMA transfer to the identified peripheral.
In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory size
Defines the data size of each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PL {
	(flecs.doc.Description, flecs.doc.Brief) : {"priority level
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MEM2MEM {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory-to-memory mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CNDTR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x number of data register"}
	NDT {
	(flecs.doc.Description, flecs.doc.Brief) : {"number of data to transfer (0 to 216-1)
This field is updated by hardware when the channel is enabled:
It is decremented after each single DMA 'read followed by write' transfer, indicating the remaining amount of data items to transfer.
It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).
It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).
If this field is zero, no transfer can be served whatever the channel status (enabled or not).
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CPAR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x peripheral address register"}
	PA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the peripheral data register from/to which the data will be read/written.
When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.
When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CMAR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x memory address register"}
	MA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the memory from/to which the data will be read/written.
When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.
When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CCR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel 2 configuration register"}
	EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"channel enable
When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).
Note: this bit is set and cleared by software."}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	HTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	TEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"data transfer direction
This bit must be set only in memory-to-peripheral and peripheral-to-memory modes.
Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	CIRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"circular mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	PINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral increment mode
Defines the increment mode for each DMA transfer to the identified peripheral.
n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory increment mode
Defines the increment mode for each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral size
Defines the data size of each DMA transfer to the identified peripheral.
In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory size
Defines the data size of each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PL {
	(flecs.doc.Description, flecs.doc.Brief) : {"priority level
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MEM2MEM {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory-to-memory mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CNDTR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x number of data register"}
	NDT {
	(flecs.doc.Description, flecs.doc.Brief) : {"number of data to transfer (0 to 216-1)
This field is updated by hardware when the channel is enabled:
It is decremented after each single DMA 'read followed by write' transfer, indicating the remaining amount of data items to transfer.
It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).
It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).
If this field is zero, no transfer can be served whatever the channel status (enabled or not).
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CPAR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x peripheral address register"}
	PA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the peripheral data register from/to which the data will be read/written.
When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.
When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CMAR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x memory address register"}
	MA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the memory from/to which the data will be read/written.
When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.
When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CCR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel 3 configuration register"}
	EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"channel enable
When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).
Note: this bit is set and cleared by software."}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	HTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	TEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"data transfer direction
This bit must be set only in memory-to-peripheral and peripheral-to-memory modes.
Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	CIRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"circular mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	PINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral increment mode
Defines the increment mode for each DMA transfer to the identified peripheral.
n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory increment mode
Defines the increment mode for each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral size
Defines the data size of each DMA transfer to the identified peripheral.
In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory size
Defines the data size of each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PL {
	(flecs.doc.Description, flecs.doc.Brief) : {"priority level
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MEM2MEM {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory-to-memory mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CNDTR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x configuration register"}
	NDT {
	(flecs.doc.Description, flecs.doc.Brief) : {"number of data to transfer (0 to 216-1)
This field is updated by hardware when the channel is enabled:
It is decremented after each single DMA 'read followed by write' transfer, indicating the remaining amount of data items to transfer.
It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).
It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).
If this field is zero, no transfer can be served whatever the channel status (enabled or not).
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CPAR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x peripheral address register"}
	PA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the peripheral data register from/to which the data will be read/written.
When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.
When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CMAR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x memory address register"}
	MA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the memory from/to which the data will be read/written.
When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.
When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CCR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel 4 configuration register"}
	EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"channel enable
When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).
Note: this bit is set and cleared by software."}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	HTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	TEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"data transfer direction
This bit must be set only in memory-to-peripheral and peripheral-to-memory modes.
Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	CIRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"circular mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	PINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral increment mode
Defines the increment mode for each DMA transfer to the identified peripheral.
n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory increment mode
Defines the increment mode for each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral size
Defines the data size of each DMA transfer to the identified peripheral.
In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory size
Defines the data size of each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PL {
	(flecs.doc.Description, flecs.doc.Brief) : {"priority level
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MEM2MEM {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory-to-memory mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CNDTR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x configuration register"}
	NDT {
	(flecs.doc.Description, flecs.doc.Brief) : {"number of data to transfer (0 to 216-1)
This field is updated by hardware when the channel is enabled:
It is decremented after each single DMA 'read followed by write' transfer, indicating the remaining amount of data items to transfer.
It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).
It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).
If this field is zero, no transfer can be served whatever the channel status (enabled or not).
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CPAR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x peripheral address register"}
	PA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the peripheral data register from/to which the data will be read/written.
When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.
When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CMAR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x memory address register"}
	MA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the memory from/to which the data will be read/written.
When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.
When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CCR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel 5 configuration register"}
	EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"channel enable
When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).
Note: this bit is set and cleared by software."}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	HTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	TEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"data transfer direction
This bit must be set only in memory-to-peripheral and peripheral-to-memory modes.
Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	CIRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"circular mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	PINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral increment mode
Defines the increment mode for each DMA transfer to the identified peripheral.
n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory increment mode
Defines the increment mode for each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral size
Defines the data size of each DMA transfer to the identified peripheral.
In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory size
Defines the data size of each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PL {
	(flecs.doc.Description, flecs.doc.Brief) : {"priority level
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MEM2MEM {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory-to-memory mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CNDTR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x configuration register"}
	NDT {
	(flecs.doc.Description, flecs.doc.Brief) : {"number of data to transfer (0 to 216-1)
This field is updated by hardware when the channel is enabled:
It is decremented after each single DMA 'read followed by write' transfer, indicating the remaining amount of data items to transfer.
It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).
It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).
If this field is zero, no transfer can be served whatever the channel status (enabled or not).
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CPAR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x peripheral address register"}
	PA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the peripheral data register from/to which the data will be read/written.
When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.
When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CMAR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x memory address register"}
	MA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the memory from/to which the data will be read/written.
When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.
When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CCR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel 6 configuration register"}
	EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"channel enable
When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).
Note: this bit is set and cleared by software."}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	HTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	TEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"data transfer direction
This bit must be set only in memory-to-peripheral and peripheral-to-memory modes.
Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	CIRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"circular mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	PINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral increment mode
Defines the increment mode for each DMA transfer to the identified peripheral.
n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory increment mode
Defines the increment mode for each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral size
Defines the data size of each DMA transfer to the identified peripheral.
In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory size
Defines the data size of each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PL {
	(flecs.doc.Description, flecs.doc.Brief) : {"priority level
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MEM2MEM {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory-to-memory mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CNDTR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x configuration register"}
	NDT {
	(flecs.doc.Description, flecs.doc.Brief) : {"number of data to transfer (0 to 216-1)
This field is updated by hardware when the channel is enabled:
It is decremented after each single DMA 'read followed by write' transfer, indicating the remaining amount of data items to transfer.
It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).
It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).
If this field is zero, no transfer can be served whatever the channel status (enabled or not).
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CPAR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x peripheral address register"}
	PA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the peripheral data register from/to which the data will be read/written.
When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.
When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CMAR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x memory address register"}
	MA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the memory from/to which the data will be read/written.
When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.
When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CCR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel 7 configuration register"}
	EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"channel enable
When a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).
Note: this bit is set and cleared by software."}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer complete interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	HTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"half transfer interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	TEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"transfer error interrupt enable
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"data transfer direction
This bit must be set only in memory-to-peripheral and peripheral-to-memory modes.
Source attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Destination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Destination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.
Source attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	CIRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"circular mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
	PINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral increment mode
Defines the increment mode for each DMA transfer to the identified peripheral.
n memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MINC {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory increment mode
Defines the increment mode for each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral size
Defines the data size of each DMA transfer to the identified peripheral.
In memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory size
Defines the data size of each DMA transfer to the identified memory.
In memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.
In peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	PL {
	(flecs.doc.Description, flecs.doc.Brief) : {"priority level
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
	MEM2MEM {
	(flecs.doc.Description, flecs.doc.Brief) : {"memory-to-memory mode
Note: this bit is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CNDTR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x configuration register"}
	NDT {
	(flecs.doc.Description, flecs.doc.Brief) : {"number of data to transfer (0 to 216-1)
This field is updated by hardware when the channel is enabled:
It is decremented after each single DMA 'read followed by write' transfer, indicating the remaining amount of data items to transfer.
It is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).
It is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).
If this field is zero, no transfer can be served whatever the channel status (enabled or not).
Note: this field is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CPAR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x peripheral address register"}
	PA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the peripheral data register from/to which the data will be read/written.
When PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.
When PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA_CMAR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA channel x memory address register"}
	MA {
	(flecs.doc.Description, flecs.doc.Brief) : {"peripheral address
It contains the base address of the memory from/to which the data will be read/written.
When MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.
When MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.
In memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.
In peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.
Note: this register is set and cleared by software.
It must not be written when the channel is enabled (EN = 1).
It is not read-only when the channel is enabled (EN=1)."}
	}
}

DMA2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module DMA2
DMAMUX {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMUX"}
}
module DMAMUX
C0CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request line multiplexer
          channel x control register"}
	DMAREQ_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input DMA request line
              selected"}
	}
	SOIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at synchronization
              event overrun"}
	}
	EGE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Event generation
              enable/disable"}
	}
	SE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous operating mode
              enable/disable"}
	}
	SPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization event type selector
              Defines the synchronization event on the selected
              synchronization input:"}
	}
	NBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to forward
              Defines the number of DMA requests forwarded before
              output event is generated. In synchronous mode, it
              also defines the number of DMA requests to forward
              after a synchronization event, then stop forwarding.
              The actual number of DMA requests forwarded is
              NBREQ+1. Note: This field can only be written when
              both SE and EGE bits are reset."}
	}
	SYNC_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization input
              selected"}
	}
}

C1CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request line multiplexer
          channel x control register"}
	DMAREQ_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input DMA request line
              selected"}
	}
	SOIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at synchronization
              event overrun"}
	}
	EGE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Event generation
              enable/disable"}
	}
	SE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous operating mode
              enable/disable"}
	}
	SPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization event type selector
              Defines the synchronization event on the selected
              synchronization input:"}
	}
	NBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to forward
              Defines the number of DMA requests forwarded before
              output event is generated. In synchronous mode, it
              also defines the number of DMA requests to forward
              after a synchronization event, then stop forwarding.
              The actual number of DMA requests forwarded is
              NBREQ+1. Note: This field can only be written when
              both SE and EGE bits are reset."}
	}
	SYNC_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization input
              selected"}
	}
}

C2CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request line multiplexer
          channel x control register"}
	DMAREQ_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input DMA request line
              selected"}
	}
	SOIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at synchronization
              event overrun"}
	}
	EGE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Event generation
              enable/disable"}
	}
	SE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous operating mode
              enable/disable"}
	}
	SPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization event type selector
              Defines the synchronization event on the selected
              synchronization input:"}
	}
	NBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to forward
              Defines the number of DMA requests forwarded before
              output event is generated. In synchronous mode, it
              also defines the number of DMA requests to forward
              after a synchronization event, then stop forwarding.
              The actual number of DMA requests forwarded is
              NBREQ+1. Note: This field can only be written when
              both SE and EGE bits are reset."}
	}
	SYNC_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization input
              selected"}
	}
}

C3CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request line multiplexer
          channel x control register"}
	DMAREQ_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input DMA request line
              selected"}
	}
	SOIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at synchronization
              event overrun"}
	}
	EGE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Event generation
              enable/disable"}
	}
	SE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous operating mode
              enable/disable"}
	}
	SPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization event type selector
              Defines the synchronization event on the selected
              synchronization input:"}
	}
	NBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to forward
              Defines the number of DMA requests forwarded before
              output event is generated. In synchronous mode, it
              also defines the number of DMA requests to forward
              after a synchronization event, then stop forwarding.
              The actual number of DMA requests forwarded is
              NBREQ+1. Note: This field can only be written when
              both SE and EGE bits are reset."}
	}
	SYNC_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization input
              selected"}
	}
}

C4CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request line multiplexer
          channel x control register"}
	DMAREQ_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input DMA request line
              selected"}
	}
	SOIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at synchronization
              event overrun"}
	}
	EGE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Event generation
              enable/disable"}
	}
	SE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous operating mode
              enable/disable"}
	}
	SPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization event type selector
              Defines the synchronization event on the selected
              synchronization input:"}
	}
	NBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to forward
              Defines the number of DMA requests forwarded before
              output event is generated. In synchronous mode, it
              also defines the number of DMA requests to forward
              after a synchronization event, then stop forwarding.
              The actual number of DMA requests forwarded is
              NBREQ+1. Note: This field can only be written when
              both SE and EGE bits are reset."}
	}
	SYNC_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization input
              selected"}
	}
}

C5CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request line multiplexer
          channel x control register"}
	DMAREQ_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input DMA request line
              selected"}
	}
	SOIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at synchronization
              event overrun"}
	}
	EGE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Event generation
              enable/disable"}
	}
	SE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous operating mode
              enable/disable"}
	}
	SPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization event type selector
              Defines the synchronization event on the selected
              synchronization input:"}
	}
	NBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to forward
              Defines the number of DMA requests forwarded before
              output event is generated. In synchronous mode, it
              also defines the number of DMA requests to forward
              after a synchronization event, then stop forwarding.
              The actual number of DMA requests forwarded is
              NBREQ+1. Note: This field can only be written when
              both SE and EGE bits are reset."}
	}
	SYNC_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization input
              selected"}
	}
}

C6CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request line multiplexer
          channel x control register"}
	DMAREQ_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input DMA request line
              selected"}
	}
	SOIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at synchronization
              event overrun"}
	}
	EGE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Event generation
              enable/disable"}
	}
	SE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous operating mode
              enable/disable"}
	}
	SPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization event type selector
              Defines the synchronization event on the selected
              synchronization input:"}
	}
	NBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to forward
              Defines the number of DMA requests forwarded before
              output event is generated. In synchronous mode, it
              also defines the number of DMA requests to forward
              after a synchronization event, then stop forwarding.
              The actual number of DMA requests forwarded is
              NBREQ+1. Note: This field can only be written when
              both SE and EGE bits are reset."}
	}
	SYNC_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronization input
              selected"}
	}
}

RG0CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request generator channel x
          control register"}
	SIG_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request trigger input
              selected"}
	}
	OIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at trigger event
              overrun"}
	}
	GE {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request generator channel
              enable/disable"}
	}
	GPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request generator trigger event type
              selection Defines the trigger event on the selected
              DMA request trigger input"}
	}
	GNBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to generate
              Defines the number of DMA requests generated after a
              trigger event, then stop generating. The actual
              number of generated DMA requests is GNBREQ+1. Note:
              This field can only be written when GE bit is
              reset."}
	}
}

RG1CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request generator channel x
          control register"}
	SIG_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request trigger input
              selected"}
	}
	OIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at trigger event
              overrun"}
	}
	GE {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request generator channel
              enable/disable"}
	}
	GPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request generator trigger event type
              selection Defines the trigger event on the selected
              DMA request trigger input"}
	}
	GNBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to generate
              Defines the number of DMA requests generated after a
              trigger event, then stop generating. The actual
              number of generated DMA requests is GNBREQ+1. Note:
              This field can only be written when GE bit is
              reset."}
	}
}

RG2CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request generator channel x
          control register"}
	SIG_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request trigger input
              selected"}
	}
	OIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at trigger event
              overrun"}
	}
	GE {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request generator channel
              enable/disable"}
	}
	GPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request generator trigger event type
              selection Defines the trigger event on the selected
              DMA request trigger input"}
	}
	GNBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to generate
              Defines the number of DMA requests generated after a
              trigger event, then stop generating. The actual
              number of generated DMA requests is GNBREQ+1. Note:
              This field can only be written when GE bit is
              reset."}
	}
}

RG3CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request generator channel x
          control register"}
	SIG_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request trigger input
              selected"}
	}
	OIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt enable at trigger event
              overrun"}
	}
	GE {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request generator channel
              enable/disable"}
	}
	GPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA request generator trigger event type
              selection Defines the trigger event on the selected
              DMA request trigger input"}
	}
	GNBREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of DMA requests to generate
              Defines the number of DMA requests generated after a
              trigger event, then stop generating. The actual
              number of generated DMA requests is GNBREQ+1. Note:
              This field can only be written when GE bit is
              reset."}
	}
}

RGSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request generator status
          register"}
	OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger event overrun flag The flag is
              set when a trigger event occurs on DMA request
              generator channel x, while the DMA request generator
              counter value is lower than GNBREQ. The flag is
              cleared by writing 1 to the corresponding COFx bit in
              DMAMUX_RGCFR register."}
	}
}

RGCFR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMux - DMA request generator clear flag
          register"}
	COF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear trigger event overrun flag Upon
              setting, this bit clears the corresponding overrun
              flag OFx in the DMAMUX_RGCSR register."}
	}
}

GPIOA {
	(flecs.doc.Description, flecs.doc.Brief) : {"General-purpose I/Os"}
}
module GPIOA
MODER {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port mode register"}
	MODER15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
}

OTYPER {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port output type register"}
	OT15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
}

OSPEEDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port output speed
          register"}
	OSPEEDR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
}

PUPDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port pull-up/pull-down
          register"}
	PUPDR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
}

IDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port input data register"}
	IDR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
}

ODR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port output data register"}
	ODR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
}

BSRR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port bit set/reset
          register"}
	BR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
}

LCKR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port configuration lock
          register"}
	LCKK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
}

AFRL {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO alternate function low
          register"}
	AFSEL7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
}

AFRH {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO alternate function high
          register"}
	AFSEL15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
}

BRR {
	(flecs.doc.Description, flecs.doc.Brief) : {"port bit reset register"}
	BR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
}

GPIOB {
	(flecs.doc.Description, flecs.doc.Brief) : {"General-purpose I/Os"}
}
module GPIOB
MODER {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port mode register"}
	MODER15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	MODER0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
}

OTYPER {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port output type register"}
	OT15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OT0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
}

OSPEEDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port output speed
          register"}
	OSPEEDR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	OSPEEDR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
}

PUPDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port pull-up/pull-down
          register"}
	PUPDR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
	PUPDR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x configuration bits (y =
              0..15)"}
	}
}

IDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port input data register"}
	IDR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
	IDR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port input data (y =
              0..15)"}
	}
}

ODR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port output data register"}
	ODR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
	ODR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port output data (y =
              0..15)"}
	}
}

BSRR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port bit set/reset
          register"}
	BR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x reset bit y (y =
              0..15)"}
	}
	BR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
	BS0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x set bit y (y=
              0..15)"}
	}
}

LCKR {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port configuration lock
          register"}
	LCKK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
	LCK0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port x lock bit y (y=
              0..15)"}
	}
}

AFRL {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO alternate function low
          register"}
	AFSEL7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
	AFSEL0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 0..7)"}
	}
}

AFRH {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO alternate function high
          register"}
	AFSEL15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
	AFSEL8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alternate function selection for port x
              bit y (y = 8..15)"}
	}
}

BRR {
	(flecs.doc.Description, flecs.doc.Brief) : {"port bit reset register"}
	BR0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
	BR15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Port Reset bit"}
	}
}

GPIOC {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module GPIOC
GPIOD {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module GPIOD
GPIOF {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module GPIOF
CRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Cyclic redundancy check calculation
      unit"}
}
module CRC
DR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data register"}
	DR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data register bits"}
	}
}

IDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Independent data register"}
	IDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"General-purpose 32-bit data register
              bits"}
	}
}

CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Control register"}
	REV_OUT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Reverse output data"}
	}
	REV_IN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Reverse input data"}
	}
	POLYSIZE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Polynomial size"}
	}
	RESET {
	(flecs.doc.Description, flecs.doc.Brief) : {"RESET bit"}
	}
}

INIT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Initial CRC value"}
	CRC_INIT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Programmable initial CRC
              value"}
	}
}

POL {
	(flecs.doc.Description, flecs.doc.Brief) : {"polynomial"}
	POL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Programmable polynomial"}
	}
}

EXTI {
	(flecs.doc.Description, flecs.doc.Brief) : {"External interrupt/event
      controller"}
}
module EXTI
RTSR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI rising trigger selection
          register"}
	RT0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
	RT15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising trigger event configuration bit
              of Configurable Event line"}
	}
}

FTSR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI falling trigger selection
          register"}
	FT0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
	FT15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling trigger event configuration bit of configurable line"}
	}
}

SWIER1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI software interrupt event
          register"}
	SWI0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
	SWI15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software rising edge event trigger on line"}
	}
}

RPR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI rising edge pending
          register"}
	RPIF0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"configurable event inputs x rising edge
              Pending bit"}
	}
	RPIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
	RPIF15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rising edge event pending for configurable line"}
	}
}

FPR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI falling edge pending
          register"}
	FPIF0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
	FPIF15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Falling edge event pending for configurable line"}
	}
}

EXTICR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI external interrupt selection
          register"}
	EXTI0_7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI8_15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI16_23 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI24_31 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
}

EXTICR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI external interrupt selection
          register"}
	EXTI0_7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI8_15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI16_23 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI24_31 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
}

EXTICR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI external interrupt selection
          register"}
	EXTI0_7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI8_15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI16_23 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI24_31 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
}

EXTICR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI external interrupt selection
          register"}
	EXTI0_7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI8_15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI16_23 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
	EXTI24_31 {
	(flecs.doc.Description, flecs.doc.Brief) : {"GPIO port selection"}
	}
}

IMR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI CPU wakeup with interrupt mask
          register"}
	IM0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM19 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM21 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM22 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM23 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM24 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM25 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM26 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
	IM31 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with interrupt mask on event
              input"}
	}
}

EMR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI CPU wakeup with event mask
          register"}
	EM0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM19 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM21 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM23 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM25 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM26 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
	EM31 {
	(flecs.doc.Description, flecs.doc.Brief) : {"CPU wakeup with event mask on event
              input"}
	}
}

TIM16 {
	(flecs.doc.Description, flecs.doc.Brief) : {"General purpose timers"}
}
module TIM16
CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 1"}
	CEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Counter enable"}
	}
	UDIS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update disable"}
	}
	URS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update request source"}
	}
	OPM {
	(flecs.doc.Description, flecs.doc.Brief) : {"One-pulse mode"}
	}
	ARPE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto-reload preload enable"}
	}
	CKD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock division"}
	}
	UIFREMAP {
	(flecs.doc.Description, flecs.doc.Brief) : {"UIF status bit remapping"}
	}
}

CR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 2"}
	OIS1N {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 1"}
	}
	OIS1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 1"}
	}
	CCDS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare DMA
              selection"}
	}
	CCUS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare control update
              selection"}
	}
	CCPC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare preloaded
              control"}
	}
}

DIER {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA/Interrupt enable register"}
	COMDE {
	(flecs.doc.Description, flecs.doc.Brief) : {"COM DMA request enable"}
	}
	CC1DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 DMA request
              enable"}
	}
	UDE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update DMA request enable"}
	}
	BIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break interrupt enable"}
	}
	COMIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"COM interrupt enable"}
	}
	CC1IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 interrupt
              enable"}
	}
	UIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update interrupt enable"}
	}
}

SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"status register"}
	CC1OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 overcapture
              flag"}
	}
	BIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break interrupt flag"}
	}
	COMIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"COM interrupt flag"}
	}
	CC1IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 1 interrupt
              flag"}
	}
	UIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update interrupt flag"}
	}
}

EGR {
	(flecs.doc.Description, flecs.doc.Brief) : {"event generation register"}
	BG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break generation"}
	}
	COMG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare control update
              generation"}
	}
	CC1G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 1
              generation"}
	}
	UG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update generation"}
	}
}

CCMR1_Output {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register (output
          mode)"}
	OC1M_2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 mode"}
	}
	OC1M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 mode"}
	}
	OC1PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 preload
              enable"}
	}
	OC1FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 fast
              enable"}
	}
	CC1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1
              selection"}
	}
}

CCMR1_Input {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 1 (input
          mode)"}
	IC1F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 1 filter"}
	}
	IC1PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 1 prescaler"}
	}
	CC1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1
              selection"}
	}
}

CCER {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare enable
          register"}
	CC1NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              Polarity"}
	}
	CC1NE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 complementary output
              enable"}
	}
	CC1P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              Polarity"}
	}
	CC1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              enable"}
	}
}

CNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"counter"}
	CNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"counter value"}
	}
	UIFCPY {
	(flecs.doc.Description, flecs.doc.Brief) : {"UIF Copy"}
	}
}

PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"prescaler"}
	PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prescaler value"}
	}
}

ARR {
	(flecs.doc.Description, flecs.doc.Brief) : {"auto-reload register"}
	ARR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto-reload value"}
	}
}

RCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"repetition counter register"}
	REP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Repetition counter value"}
	}
}

CCR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 1"}
	CCR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 value"}
	}
}

BDTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"break and dead-time register"}
	DTG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Dead-time generator setup"}
	}
	LOCK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Lock configuration"}
	}
	OSSI {
	(flecs.doc.Description, flecs.doc.Brief) : {"Off-state selection for Idle
              mode"}
	}
	OSSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Off-state selection for Run
              mode"}
	}
	BKE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break enable"}
	}
	BKP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break polarity"}
	}
	AOE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Automatic output enable"}
	}
	MOE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Main output enable"}
	}
	BKF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break filter"}
	}
	BKDSRM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break Disarm"}
	}
	BKBID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break Bidirectional"}
	}
}

DCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA control register"}
	DBL {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA burst length"}
	}
	DBA {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA base address"}
	}
}

DMAR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA address for full transfer"}
	DMAB {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA register for burst
              accesses"}
	}
}

AF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM17 option register 1"}
	BKINE {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK BKIN input enable"}
	}
	BKCMP1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK COMP1 enable"}
	}
	BKCMP2E {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK COMP2 enable"}
	}
	BKDFBK1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK DFSDM_BREAK1 enable"}
	}
	BKINP {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK BKIN input polarity"}
	}
	BKCMP1P {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK COMP1 input polarity"}
	}
	BKCMP2P {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK COMP2 input polarit"}
	}
}

TISEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"input selection register"}
	TI1SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"selects input"}
	}
}

TIM17 {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module TIM17
USART1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Universal synchronous asynchronous receiver
      transmitter"}
}
module USART1
CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Control register 1"}
	RXFFIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"RXFIFO Full interrupt
              enable"}
	}
	TXFEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"TXFIFO empty interrupt
              enable"}
	}
	FIFOEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"FIFO mode enable"}
	}
	M1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Word length"}
	}
	EOBIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of Block interrupt
              enable"}
	}
	RTOIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receiver timeout interrupt
              enable"}
	}
	DEAT {
	(flecs.doc.Description, flecs.doc.Brief) : {"DEAT"}
	}
	DEDT {
	(flecs.doc.Description, flecs.doc.Brief) : {"DEDT"}
	}
	OVER8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Oversampling mode"}
	}
	CMIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Character match interrupt
              enable"}
	}
	MME {
	(flecs.doc.Description, flecs.doc.Brief) : {"Mute mode enable"}
	}
	M0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Word length"}
	}
	WAKE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receiver wakeup method"}
	}
	PCE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Parity control enable"}
	}
	PS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Parity selection"}
	}
	PEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"PE interrupt enable"}
	}
	TXEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt enable"}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmission complete interrupt
              enable"}
	}
	RXNEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"RXNE interrupt enable"}
	}
	IDLEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"IDLE interrupt enable"}
	}
	TE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmitter enable"}
	}
	RE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receiver enable"}
	}
	UESM {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART enable in Stop mode"}
	}
	UE {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART enable"}
	}
}

CR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Control register 2"}
	ADD4_7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Address of the USART node"}
	}
	ADD0_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Address of the USART node"}
	}
	RTOEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receiver timeout enable"}
	}
	ABRMOD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto baud rate mode"}
	}
	ABREN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto baud rate enable"}
	}
	MSBFIRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Most significant bit first"}
	}
	TAINV {
	(flecs.doc.Description, flecs.doc.Brief) : {"Binary data inversion"}
	}
	TXINV {
	(flecs.doc.Description, flecs.doc.Brief) : {"TX pin active level
              inversion"}
	}
	RXINV {
	(flecs.doc.Description, flecs.doc.Brief) : {"RX pin active level
              inversion"}
	}
	SWAP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Swap TX/RX pins"}
	}
	LINEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"LIN mode enable"}
	}
	STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"STOP bits"}
	}
	CLKEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock enable"}
	}
	CPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock polarity"}
	}
	CPHA {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock phase"}
	}
	LBCL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Last bit clock pulse"}
	}
	LBDIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"LIN break detection interrupt
              enable"}
	}
	LBDL {
	(flecs.doc.Description, flecs.doc.Brief) : {"LIN break detection length"}
	}
	ADDM7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"7-bit Address Detection/4-bit Address
              Detection"}
	}
	DIS_NSS {
	(flecs.doc.Description, flecs.doc.Brief) : {"When the DSI_NSS bit is set, the NSS pin
              input will be ignored"}
	}
	SLVEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous Slave mode
              enable"}
	}
}

CR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Control register 3"}
	TXFTCFG {
	(flecs.doc.Description, flecs.doc.Brief) : {"TXFIFO threshold
              configuration"}
	}
	RXFTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"RXFIFO threshold interrupt
              enable"}
	}
	RXFTCFG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receive FIFO threshold
              configuration"}
	}
	TCBGTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tr Complete before guard time, interrupt
              enable"}
	}
	TXFTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"threshold interrupt enable"}
	}
	WUFIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup from Stop mode interrupt
              enable"}
	}
	WUS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup from Stop mode interrupt flag
              selection"}
	}
	SCARCNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Smartcard auto-retry count"}
	}
	DEP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Driver enable polarity
              selection"}
	}
	DEM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Driver enable mode"}
	}
	DDRE {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA Disable on Reception
              Error"}
	}
	OVRDIS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Overrun Disable"}
	}
	ONEBIT {
	(flecs.doc.Description, flecs.doc.Brief) : {"One sample bit method
              enable"}
	}
	CTSIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"CTS interrupt enable"}
	}
	CTSE {
	(flecs.doc.Description, flecs.doc.Brief) : {"CTS enable"}
	}
	RTSE {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTS enable"}
	}
	DMAT {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA enable transmitter"}
	}
	DMAR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA enable receiver"}
	}
	SCEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Smartcard mode enable"}
	}
	NACK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Smartcard NACK enable"}
	}
	HDSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Half-duplex selection"}
	}
	IRLP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Ir low-power"}
	}
	IREN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Ir mode enable"}
	}
	EIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Error interrupt enable"}
	}
}

BRR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Baud rate register"}
	BRR_4_15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRR_4_15"}
	}
	BRR_0_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRR_0_3"}
	}
}

GTPR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Guard time and prescaler
          register"}
	GT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Guard time value"}
	}
	PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prescaler value"}
	}
}

RTOR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receiver timeout register"}
	BLEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Block Length"}
	}
	RTO {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receiver timeout value"}
	}
}

RQR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Request register"}
	TXFRQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmit data flush
              request"}
	}
	RXFRQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receive data flush request"}
	}
	MMRQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Mute mode request"}
	}
	SBKRQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Send break request"}
	}
	ABRRQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto baud rate request"}
	}
}

ISR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt & status
          register"}
	TXFT {
	(flecs.doc.Description, flecs.doc.Brief) : {"TXFIFO threshold flag"}
	}
	RXFT {
	(flecs.doc.Description, flecs.doc.Brief) : {"RXFIFO threshold flag"}
	}
	TCBGT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmission complete before guard time
              flag"}
	}
	RXFF {
	(flecs.doc.Description, flecs.doc.Brief) : {"RXFIFO Full"}
	}
	TXFE {
	(flecs.doc.Description, flecs.doc.Brief) : {"TXFIFO Empty"}
	}
	REACK {
	(flecs.doc.Description, flecs.doc.Brief) : {"REACK"}
	}
	TEACK {
	(flecs.doc.Description, flecs.doc.Brief) : {"TEACK"}
	}
	WUF {
	(flecs.doc.Description, flecs.doc.Brief) : {"WUF"}
	}
	RWU {
	(flecs.doc.Description, flecs.doc.Brief) : {"RWU"}
	}
	SBKF {
	(flecs.doc.Description, flecs.doc.Brief) : {"SBKF"}
	}
	CMF {
	(flecs.doc.Description, flecs.doc.Brief) : {"CMF"}
	}
	BUSY {
	(flecs.doc.Description, flecs.doc.Brief) : {"BUSY"}
	}
	ABRF {
	(flecs.doc.Description, flecs.doc.Brief) : {"ABRF"}
	}
	ABRE {
	(flecs.doc.Description, flecs.doc.Brief) : {"ABRE"}
	}
	UDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI slave underrun error
              flag"}
	}
	EOBF {
	(flecs.doc.Description, flecs.doc.Brief) : {"EOBF"}
	}
	RTOF {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTOF"}
	}
	CTS {
	(flecs.doc.Description, flecs.doc.Brief) : {"CTS"}
	}
	CTSIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"CTSIF"}
	}
	LBDF {
	(flecs.doc.Description, flecs.doc.Brief) : {"LBDF"}
	}
	TXE {
	(flecs.doc.Description, flecs.doc.Brief) : {"TXE"}
	}
	TC {
	(flecs.doc.Description, flecs.doc.Brief) : {"TC"}
	}
	RXNE {
	(flecs.doc.Description, flecs.doc.Brief) : {"RXNE"}
	}
	IDLE {
	(flecs.doc.Description, flecs.doc.Brief) : {"IDLE"}
	}
	ORE {
	(flecs.doc.Description, flecs.doc.Brief) : {"ORE"}
	}
	NF {
	(flecs.doc.Description, flecs.doc.Brief) : {"NF"}
	}
	FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"FE"}
	}
	PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"PE"}
	}
}

ICR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt flag clear register"}
	WUCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup from Stop mode clear
              flag"}
	}
	CMCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Character match clear flag"}
	}
	UDRCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI slave underrun clear
              flag"}
	}
	EOBCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"End of block clear flag"}
	}
	RTOCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receiver timeout clear
              flag"}
	}
	CTSCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"CTS clear flag"}
	}
	LBDCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"LIN break detection clear
              flag"}
	}
	TCBGTCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmission complete before Guard time
              clear flag"}
	}
	TCCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmission complete clear
              flag"}
	}
	TXFECF {
	(flecs.doc.Description, flecs.doc.Brief) : {"TXFIFO empty clear flag"}
	}
	IDLECF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Idle line detected clear
              flag"}
	}
	ORECF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Overrun error clear flag"}
	}
	NCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Noise detected clear flag"}
	}
	FECF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Framing error clear flag"}
	}
	PECF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Parity error clear flag"}
	}
}

RDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receive data register"}
	RDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receive data value"}
	}
}

TDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmit data register"}
	TDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmit data value"}
	}
}

PRESC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prescaler register"}
	PRESCALER {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock prescaler"}
	}
}

USART2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module USART2
SPI1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Serial peripheral interface/Inter-IC
      sound"}
}
module SPI1
CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 1"}
	BIDIMODE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Bidirectional data mode
              enable"}
	}
	BIDIOE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output enable in bidirectional
              mode"}
	}
	CRCEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hardware CRC calculation
              enable"}
	}
	CRCNEXT {
	(flecs.doc.Description, flecs.doc.Brief) : {"CRC transfer next"}
	}
	DFF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data frame format"}
	}
	RXONLY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receive only"}
	}
	SSM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Software slave management"}
	}
	SSI {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal slave select"}
	}
	LSBFIRST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Frame format"}
	}
	SPE {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI enable"}
	}
	BR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Baud rate control"}
	}
	MSTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Master selection"}
	}
	CPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock polarity"}
	}
	CPHA {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock phase"}
	}
}

CR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 2"}
	RXDMAEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rx buffer DMA enable"}
	}
	TXDMAEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tx buffer DMA enable"}
	}
	SSOE {
	(flecs.doc.Description, flecs.doc.Brief) : {"SS output enable"}
	}
	NSSP {
	(flecs.doc.Description, flecs.doc.Brief) : {"NSS pulse management"}
	}
	FRF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Frame format"}
	}
	ERRIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Error interrupt enable"}
	}
	RXNEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"RX buffer not empty interrupt
              enable"}
	}
	TXEIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tx buffer empty interrupt
              enable"}
	}
	DS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data size"}
	}
	FRXTH {
	(flecs.doc.Description, flecs.doc.Brief) : {"FIFO reception threshold"}
	}
	LDMA_RX {
	(flecs.doc.Description, flecs.doc.Brief) : {"Last DMA transfer for
              reception"}
	}
	LDMA_TX {
	(flecs.doc.Description, flecs.doc.Brief) : {"Last DMA transfer for
              transmission"}
	}
}

SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"status register"}
	RXNE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receive buffer not empty"}
	}
	TXE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmit buffer empty"}
	}
	CHSIDE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel side"}
	}
	UDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Underrun flag"}
	}
	CRCERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"CRC error flag"}
	}
	MODF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Mode fault"}
	}
	OVR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Overrun flag"}
	}
	BSY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Busy flag"}
	}
	TIFRFE {
	(flecs.doc.Description, flecs.doc.Brief) : {"TI frame format error"}
	}
	FRLVL {
	(flecs.doc.Description, flecs.doc.Brief) : {"FIFO reception level"}
	}
	FTLVL {
	(flecs.doc.Description, flecs.doc.Brief) : {"FIFO transmission level"}
	}
}

DR {
	(flecs.doc.Description, flecs.doc.Brief) : {"data register"}
	DR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data register"}
	}
}

CRCPR {
	(flecs.doc.Description, flecs.doc.Brief) : {"CRC polynomial register"}
	CRCPOLY {
	(flecs.doc.Description, flecs.doc.Brief) : {"CRC polynomial register"}
	}
}

RXCRCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RX CRC register"}
	RxCRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Rx CRC register"}
	}
}

TXCRCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"TX CRC register"}
	TxCRC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tx CRC register"}
	}
}

I2SCFGR {
	(flecs.doc.Description, flecs.doc.Brief) : {"configuration register"}
	CHLEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Channel length (number of bits per audio
              channel)"}
	}
	DATLEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data length to be
              transferred"}
	}
	CKPOL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Inactive state clock
              polarity"}
	}
	I2SSTD {
	(flecs.doc.Description, flecs.doc.Brief) : {"standard selection"}
	}
	PCMSYNC {
	(flecs.doc.Description, flecs.doc.Brief) : {"PCM frame synchronization"}
	}
	I2SCFG {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2S configuration mode"}
	}
	SE2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2S enable"}
	}
	I2SMOD {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2S mode selection"}
	}
}

I2SPR {
	(flecs.doc.Description, flecs.doc.Brief) : {"prescaler register"}
	I2SDIV {
	(flecs.doc.Description, flecs.doc.Brief) : {"linear prescaler"}
	}
	ODD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Odd factor for the
              prescaler"}
	}
	MCKOE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Master clock output enable"}
	}
}

SPI2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module SPI2
TIM1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Advanced-timers"}
}
module TIM1
CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 1"}
	CEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Counter enable"}
	}
	OPM {
	(flecs.doc.Description, flecs.doc.Brief) : {"One-pulse mode"}
	}
	UDIS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update disable"}
	}
	URS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update request source"}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Direction"}
	}
	CMS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Center-aligned mode
              selection"}
	}
	ARPE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto-reload preload enable"}
	}
	CKD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock division"}
	}
	UIFREMAP {
	(flecs.doc.Description, flecs.doc.Brief) : {"UIF status bit remapping"}
	}
}

CR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 2"}
	MMS2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Master mode selection 2"}
	}
	OIS6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 6 (OC6
              output)"}
	}
	OIS5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 5 (OC5
              output)"}
	}
	OIS4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 4"}
	}
	OIS3N {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 3"}
	}
	OIS3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 3"}
	}
	OIS2N {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 2"}
	}
	OIS2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 2"}
	}
	OIS1N {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 1"}
	}
	OIS1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Idle state 1"}
	}
	TI1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"TI1 selection"}
	}
	MMS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Master mode selection"}
	}
	CCDS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare DMA
              selection"}
	}
	CCUS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare control update
              selection"}
	}
	CCPC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare preloaded
              control"}
	}
}

SMCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"slave mode control register"}
	SMS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Slave mode selection"}
	}
	OCCS {
	(flecs.doc.Description, flecs.doc.Brief) : {"OCREF clear selection"}
	}
	TS_4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger selection"}
	}
	MSM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Master/Slave mode"}
	}
	ETF {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger filter"}
	}
	ETPS {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger prescaler"}
	}
	ECE {
	(flecs.doc.Description, flecs.doc.Brief) : {"External clock enable"}
	}
	ETP {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger polarity"}
	}
	SMS_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Slave mode selection - bit
              3"}
	}
	TS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger selection"}
	}
}

DIER {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA/Interrupt enable register"}
	UIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update interrupt enable"}
	}
	CC1IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 interrupt
              enable"}
	}
	CC2IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 interrupt
              enable"}
	}
	CC3IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 interrupt
              enable"}
	}
	CC4IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 interrupt
              enable"}
	}
	COMIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"COM interrupt enable"}
	}
	TIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger interrupt enable"}
	}
	BIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break interrupt enable"}
	}
	UDE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update DMA request enable"}
	}
	CC1DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 DMA request
              enable"}
	}
	CC2DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 DMA request
              enable"}
	}
	CC3DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 DMA request
              enable"}
	}
	CC4DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 DMA request
              enable"}
	}
	COMDE {
	(flecs.doc.Description, flecs.doc.Brief) : {"COM DMA request enable"}
	}
	TDE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger DMA request enable"}
	}
}

SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"status register"}
	UIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update interrupt flag"}
	}
	CC1IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 1 interrupt
              flag"}
	}
	CC2IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 interrupt
              flag"}
	}
	CC3IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 interrupt
              flag"}
	}
	CC4IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 interrupt
              flag"}
	}
	COMIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"COM interrupt flag"}
	}
	TIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger interrupt flag"}
	}
	BIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break interrupt flag"}
	}
	B2IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break 2 interrupt flag"}
	}
	CC1OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 overcapture
              flag"}
	}
	CC2OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 2 overcapture
              flag"}
	}
	CC3OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 overcapture
              flag"}
	}
	CC4OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 overcapture
              flag"}
	}
	SBIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"System Break interrupt
              flag"}
	}
	CC5IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Compare 5 interrupt flag"}
	}
	CC6IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Compare 6 interrupt flag"}
	}
}

EGR {
	(flecs.doc.Description, flecs.doc.Brief) : {"event generation register"}
	UG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update generation"}
	}
	CC1G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 1
              generation"}
	}
	CC2G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 2
              generation"}
	}
	CC3G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 3
              generation"}
	}
	CC4G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 4
              generation"}
	}
	COMG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare control update
              generation"}
	}
	TG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger generation"}
	}
	BG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break generation"}
	}
	B2G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break 2 generation"}
	}
}

CCMR1_Output {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 1 (output
          mode)"}
	CC1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1
              selection"}
	}
	OC1FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 fast
              enable"}
	}
	OC1PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 preload
              enable"}
	}
	OC1M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 mode"}
	}
	OC1CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 clear
              enable"}
	}
	CC2S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2
              selection"}
	}
	OC2FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 fast
              enable"}
	}
	OC2PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 preload
              enable"}
	}
	OC2M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 mode"}
	}
	OC2CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 clear
              enable"}
	}
	OC1M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 mode - bit
              3"}
	}
	OC2M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 mode - bit
              3"}
	}
}

CCMR1_Input {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 1 (output
          mode)"}
	CC1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1
              selection"}
	}
	OC1FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 fast
              enable"}
	}
	OC1PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 preload
              enable"}
	}
	OC1M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 mode"}
	}
	OC1CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 clear
              enable"}
	}
	CC2S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2
              selection"}
	}
	OC2FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 fast
              enable"}
	}
	OC2PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 preload
              enable"}
	}
	OC2M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 mode"}
	}
	OC2CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 clear
              enable"}
	}
}

CCMR2_Output {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 2 (output
          mode)"}
	CC3S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3
              selection"}
	}
	OC3FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 fast
              enable"}
	}
	OC3PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 preload
              enable"}
	}
	OC3M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 mode"}
	}
	OC3CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 clear
              enable"}
	}
	CC4S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4
              selection"}
	}
	OC4FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 fast
              enable"}
	}
	OC4PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 preload
              enable"}
	}
	OC4M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 mode"}
	}
	OC4CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 clear
              enable"}
	}
	OC3M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 3 mode - bit
              3"}
	}
	OC4M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 4 mode - bit
              3"}
	}
}

CCMR2_Input {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 2 (output
          mode)"}
	CC3S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3
              selection"}
	}
	OC3FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 fast
              enable"}
	}
	OC3PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 preload
              enable"}
	}
	OC3M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 mode"}
	}
	OC3CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 clear
              enable"}
	}
	CC4S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4
              selection"}
	}
	OC4FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 fast
              enable"}
	}
	OC4PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 preload
              enable"}
	}
	OC4M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 mode"}
	}
	OC4CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 clear
              enable"}
	}
}

CCER {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare enable
          register"}
	CC1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              enable"}
	}
	CC1P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              Polarity"}
	}
	CC1NE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 complementary output
              enable"}
	}
	CC1NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              Polarity"}
	}
	CC2E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 output
              enable"}
	}
	CC2P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 output
              Polarity"}
	}
	CC2NE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 complementary output
              enable"}
	}
	CC2NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 output
              Polarity"}
	}
	CC3E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 output
              enable"}
	}
	CC3P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 output
              Polarity"}
	}
	CC3NE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 complementary output
              enable"}
	}
	CC3NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 output
              Polarity"}
	}
	CC4E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 output
              enable"}
	}
	CC4P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 output
              Polarity"}
	}
	CC4NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 complementary output
              polarity"}
	}
	CC5E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 5 output
              enable"}
	}
	CC5P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 5 output
              polarity"}
	}
	CC6E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 6 output
              enable"}
	}
	CC6P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 6 output
              polarity"}
	}
}

CNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"counter"}
	CNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"counter value"}
	}
	UIFCPY {
	(flecs.doc.Description, flecs.doc.Brief) : {"UIF copy"}
	}
}

PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"prescaler"}
	PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prescaler value"}
	}
}

ARR {
	(flecs.doc.Description, flecs.doc.Brief) : {"auto-reload register"}
	ARR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto-reload value"}
	}
}

RCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"repetition counter register"}
	REP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Repetition counter value"}
	}
}

CCR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 1"}
	CCR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 value"}
	}
}

CCR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 2"}
	CCR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 value"}
	}
}

CCR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 3"}
	CCR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare value"}
	}
}

CCR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 4"}
	CCR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare value"}
	}
}

BDTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"break and dead-time register"}
	DTG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Dead-time generator setup"}
	}
	LOCK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Lock configuration"}
	}
	OSSI {
	(flecs.doc.Description, flecs.doc.Brief) : {"Off-state selection for Idle
              mode"}
	}
	OSSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Off-state selection for Run
              mode"}
	}
	BKE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break enable"}
	}
	BKP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break polarity"}
	}
	AOE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Automatic output enable"}
	}
	MOE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Main output enable"}
	}
	BKF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break filter"}
	}
	BK2F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break 2 filter"}
	}
	BK2E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break 2 enable"}
	}
	BK2P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break 2 polarity"}
	}
	BKDSRM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break Disarm"}
	}
	BK2DSRM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break2 Disarm"}
	}
	BKBID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break Bidirectional"}
	}
	BK2ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Break2 bidirectional"}
	}
}

DCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA control register"}
	DBL {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA burst length"}
	}
	DBA {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA base address"}
	}
}

DMAR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA address for full transfer"}
	DMAB {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA register for burst
              accesses"}
	}
}

OR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"option register 1"}
	OCREF_CLR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Ocref_clr source selection"}
	}
}

CCMR3_Output {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 2 (output
          mode)"}
	OC6M_bit3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 6 mode bit
              3"}
	}
	OC5M_bit3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 5 mode bit
              3"}
	}
	OC6CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 6 clear
              enable"}
	}
	OC6M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 6 mode"}
	}
	OC6PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 6 preload
              enable"}
	}
	OC6FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 6 fast
              enable"}
	}
	OC5CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 5 clear
              enable"}
	}
	OC5M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 5 mode"}
	}
	OC5PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 5 preload
              enable"}
	}
	OC5FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 5 fast
              enable"}
	}
}

CCR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 4"}
	CCR5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare value"}
	}
	GC5C1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Group Channel 5 and Channel
              1"}
	}
	GC5C2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Group Channel 5 and Channel
              2"}
	}
	GC5C3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Group Channel 5 and Channel
              3"}
	}
}

CCR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 4"}
	CCR6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare value"}
	}
}

AF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA address for full transfer"}
	BKINE {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK BKIN input enable"}
	}
	BKCMP1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK COMP1 enable"}
	}
	BKCMP2E {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK COMP2 enable"}
	}
	BKINP {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK BKIN input polarity"}
	}
	BKCMP1P {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK COMP1 input polarity"}
	}
	BKCMP2P {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK COMP2 input polarity"}
	}
	ETRSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"ETR source selection"}
	}
}

AF2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA address for full transfer"}
	BK2INE {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK2 BKIN input enable"}
	}
	BK2CMP1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK2 COMP1 enable"}
	}
	BK2CMP2E {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK2 COMP2 enable"}
	}
	BK2DFBK0E {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK2 DFSDM_BREAK0 enable"}
	}
	BK2INP {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK2 BKIN input polarity"}
	}
	BK2CMP1P {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK2 COMP1 input polarity"}
	}
	BK2CMP2P {
	(flecs.doc.Description, flecs.doc.Brief) : {"BRK2 COMP2 input polarity"}
	}
}

TISEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1 timer input selection
          register"}
	TI1SEL3_0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"selects TI1[0] to TI1[15]
              input"}
	}
	TI2SEL3_0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"selects TI2[0] to TI2[15]
              input"}
	}
	TI3SEL3_0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"selects TI3[0] to TI3[15]
              input"}
	}
	TI4SEL3_0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"selects TI4[0] to TI4[15]
              input"}
	}
}

SYSCFG {
	(flecs.doc.Description, flecs.doc.Brief) : {"System configuration controller"}
}
module SYSCFG
CFGR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"SYSCFG configuration register
          1"}
	I2C3_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C3_FMP"}
	}
	I2C_PA10_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Fast Mode Plus (FM+) driving capability
              activation bits"}
	}
	I2C_PA9_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Fast Mode Plus (FM+) driving capability
              activation bits"}
	}
	I2C2_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"FM+ driving capability activation for
              I2C2"}
	}
	I2C1_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"FM+ driving capability activation for
              I2C1"}
	}
	I2C_PB9_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C_PB9_FMP"}
	}
	I2C_PB8_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C_PB8_FMP"}
	}
	I2C_PB7_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C_PB7_FMP"}
	}
	I2C_PBx_FMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Fast Mode Plus (FM+) driving capability
              activation bits"}
	}
	UCPD2_STROBE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Strobe signal bit for
              UCPD2"}
	}
	UCPD1_STROBE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Strobe signal bit for
              UCPD1"}
	}
	BOOSTEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"I/O analog switch voltage booster
              enable"}
	}
	IR_MOD {
	(flecs.doc.Description, flecs.doc.Brief) : {"IR Modulation Envelope signal
              selection."}
	}
	IR_POL {
	(flecs.doc.Description, flecs.doc.Brief) : {"IR output polarity
              selection"}
	}
	PA12_RMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"PA11 and PA12 remapping
              bit."}
	}
	PA11_RMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"PA11_RMP"}
	}
	MEM_MODE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Memory mapping selection
              bits"}
	}
}

CFGR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"SYSCFG configuration register
          1"}
	LOCKUP_LOCK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Cortex-M0+ LOCKUP bit enable
              bit"}
	}
	SRAM_PARITY_LOCK {
	(flecs.doc.Description, flecs.doc.Brief) : {"SRAM parity lock bit"}
	}
	ECC_LOCK {
	(flecs.doc.Description, flecs.doc.Brief) : {"ECC error lock bit"}
	}
	SRAM_PEF {
	(flecs.doc.Description, flecs.doc.Brief) : {"SRAM parity error flag"}
	}
}

ITLINE0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 0 status
          register"}
	WWDG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Window watchdog interrupt pending
              flag"}
	}
}

ITLINE2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 2 status
          register"}
	TAMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP"}
	}
	RTC {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC"}
	}
}

ITLINE3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 3 status
          register"}
	FLASH_ITF {
	(flecs.doc.Description, flecs.doc.Brief) : {"FLASH_ITF"}
	}
	FLASH_ECC {
	(flecs.doc.Description, flecs.doc.Brief) : {"FLASH_ECC"}
	}
}

ITLINE4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 4 status
          register"}
	RCC {
	(flecs.doc.Description, flecs.doc.Brief) : {"RCC"}
	}
}

ITLINE5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 5 status
          register"}
	EXTI0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI0"}
	}
	EXTI1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI1"}
	}
}

ITLINE6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 6 status
          register"}
	EXTI2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI2"}
	}
	EXTI3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI3"}
	}
}

ITLINE7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 7 status
          register"}
	EXTI4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI4"}
	}
	EXTI5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI5"}
	}
	EXTI6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI6"}
	}
	EXTI7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI7"}
	}
	EXTI8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI8"}
	}
	EXTI9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI9"}
	}
	EXTI10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI10"}
	}
	EXTI11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI11"}
	}
	EXTI12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI12"}
	}
	EXTI13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI13"}
	}
	EXTI14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI14"}
	}
	EXTI15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"EXTI15"}
	}
}

ITLINE8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 8 status
          register"}
	USB {
	(flecs.doc.Description, flecs.doc.Brief) : {"USB"}
	}
}

ITLINE9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 9 status
          register"}
	DMA1_CH1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1_CH1"}
	}
}

ITLINE10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 10 status
          register"}
	DMA1_CH2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1_CH1"}
	}
	DMA1_CH3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1_CH3"}
	}
}

ITLINE11 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 11 status
          register"}
	DMAMUX {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMAMUX"}
	}
	DMA1_CH4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1_CH4"}
	}
	DMA1_CH5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1_CH5"}
	}
	DMA1_CH6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1_CH6"}
	}
	DMA1_CH7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA1_CH7"}
	}
	DMA2_CH1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA2_CH1"}
	}
	DMA2_CH2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA2_CH2"}
	}
	DMA2_CH3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA2_CH3"}
	}
	DMA2_CH4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA2_CH4"}
	}
	DMA2_CH5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA2_CH5"}
	}
}

ITLINE12 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 12 status
          register"}
	ADC {
	(flecs.doc.Description, flecs.doc.Brief) : {"ADC"}
	}
}

ITLINE13 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 13 status
          register"}
	TIM1_CCU {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1_CCU"}
	}
	TIM1_TRG {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1_TRG"}
	}
	TIM1_UPD {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1_UPD"}
	}
	TIM1_BRK {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1_BRK"}
	}
}

ITLINE14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 14 status
          register"}
	TIM1_CC {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1_CC"}
	}
}

ITLINE16 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 16 status
          register"}
	TIM3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM3"}
	}
	TIM4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM4"}
	}
}

ITLINE17 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 17 status
          register"}
	TIM6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM6"}
	}
}

ITLINE18 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 18 status
          register"}
	TIM7 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM7"}
	}
}

ITLINE19 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 19 status
          register"}
	TIM14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM14"}
	}
}

ITLINE20 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 20 status
          register"}
	TIM15 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM15"}
	}
}

ITLINE21 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 21 status
          register"}
	TIM16 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM16"}
	}
}

ITLINE22 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 22 status
          register"}
	TIM17 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM17"}
	}
}

ITLINE23 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 23 status
          register"}
	I2C1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C1"}
	}
}

ITLINE24 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 24 status
          register"}
	I2C2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C2"}
	}
	I2C3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C3"}
	}
}

ITLINE25 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 25 status
          register"}
	SPI1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI1"}
	}
}

ITLINE26 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 26 status
          register"}
	SPI2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI2"}
	}
	SPI3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"SPI3"}
	}
}

ITLINE27 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 27 status
          register"}
	USART1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART1"}
	}
}

ITLINE28 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 28 status
          register"}
	USART2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART2"}
	}
}

ITLINE29 {
	(flecs.doc.Description, flecs.doc.Brief) : {"interrupt line 29 status
          register"}
	USART3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART3"}
	}
	USART4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART4"}
	}
	USART5 {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART5"}
	}
	USART6 {
	(flecs.doc.Description, flecs.doc.Brief) : {"USART6"}
	}
}

TAMP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper and backup registers"}
}
module TAMP
TAMP_CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP control register 1 "}
	TAMP1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper detection on TAMP_IN1 enable"}
	}
	TAMP2E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper detection on TAMP_IN2 enable"}
	}
	TAMP3E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper detection on TAMP_IN3 enable"}
	}
	ITAMP3E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal tamper 3 enable: LSE monitoring"}
	}
	ITAMP4E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal tamper 4 enable: HSE monitoring"}
	}
	ITAMP5E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal tamper 5 enable: RTC calendar overflow"}
	}
	ITAMP6E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal tamper 6 enable: ST manufacturer readout"}
	}
}

TAMP_CR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP control register 2 "}
	TAMP1NOER {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 1 no erase"}
	}
	TAMP2NOER {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 2 no erase"}
	}
	TAMP3NOER {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 3 no erase"}
	}
	TAMP1MSK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 1 mask
The tamper 1 interrupt must not be enabled when TAMP1MSK is set."}
	}
	TAMP2MSK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 2 mask
The tamper 2 interrupt must not be enabled when TAMP2MSK is set."}
	}
	TAMP3MSK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 3 mask
The tamper 3 interrupt must not be enabled when TAMP3MSK is set."}
	}
	TAMP1TRG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Active level for tamper 1 input (active mode disabled)
If TAMPFLT = 00 Tamper 1 input rising edge and high level triggers a tamper detection event.
If TAMPFLT = 00 Tamper 1 input falling edge and low level triggers a tamper detection event."}
	}
	TAMP2TRG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Active level for tamper 2 input (active mode disabled)
If TAMPFLT = 00 Tamper 2 input rising edge and high level triggers a tamper detection event.
If TAMPFLT = 00 Tamper 2 input falling edge and low level triggers a tamper detection event."}
	}
	TAMP3TRG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Active level for tamper 3 input (active mode disabled)
If TAMPFLT = 00 Tamper 3 input rising edge and high level triggers a tamper detection event.
If TAMPFLT = 00 Tamper 3 input falling edge and low level triggers a tamper detection event."}
	}
}

TAMP_FLTCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP filter control register "}
	TAMPFREQ {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper sampling frequency
Determines the frequency at which each of the TAMP_INx inputs are sampled."}
	}
	TAMPFLT {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP_INx filter count
These bits determines the number of consecutive samples at the specified level (TAMP*TRG) needed to activate a tamper event. TAMPFLT is valid for each of the TAMP_INx inputs."}
	}
	TAMPPRCH {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP_INx precharge duration
These bit determines the duration of time during which the pull-up/is activated before each sample. TAMPPRCH is valid for each of the TAMP_INx inputs."}
	}
	TAMPPUDIS {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP_INx pull-up disable
This bit determines if each of the TAMPx pins are precharged before each sample."}
	}
}

TAMP_IER {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP interrupt enable register "}
	TAMP1IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 1 interrupt enable"}
	}
	TAMP2IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 2 interrupt enable"}
	}
	TAMP3IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper 3 interrupt enable"}
	}
	ITAMP3IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal tamper 3 interrupt enable: LSE monitoring"}
	}
	ITAMP4IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal tamper 4 interrupt enable: HSE monitoring"}
	}
	ITAMP5IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal tamper 5 interrupt enable: RTC calendar overflow"}
	}
	ITAMP6IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal tamper 6 interrupt enable: ST manufacturer readout"}
	}
}

TAMP_SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP status register "}
	TAMP1F {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP1 detection flag
This flag is set by hardware when a tamper detection event is detected on the TAMP1 input."}
	}
	TAMP2F {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP2 detection flag
This flag is set by hardware when a tamper detection event is detected on the TAMP2 input."}
	}
	TAMP3F {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP3 detection flag
This flag is set by hardware when a tamper detection event is detected on the TAMP3 input."}
	}
	ITAMP3F {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE monitoring tamper detection flag
This flag is set by hardware when a tamper detection event is detected on the internal tamper 3."}
	}
	ITAMP4F {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSE monitoring tamper detection flag
This flag is set by hardware when a tamper detection event is detected on the internal tamper 4."}
	}
	ITAMP5F {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC calendar overflow tamper detection flag
This flag is set by hardware when a tamper detection event is detected on the internal tamper 5."}
	}
	ITAMP6F {
	(flecs.doc.Description, flecs.doc.Brief) : {"ST manufacturer readout tamper detection flag
This flag is set by hardware when a tamper detection event is detected on the internal tamper 6."}
	}
}

TAMP_MISR {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP masked interrupt status register "}
	TAMP1MF {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP1 interrupt masked flag
This flag is set by hardware when the tamper 1 interrupt is raised."}
	}
	TAMP2MF {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP2 interrupt masked flag
This flag is set by hardware when the tamper 2 interrupt is raised."}
	}
	TAMP3MF {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP3 interrupt masked flag
This flag is set by hardware when the tamper 3 interrupt is raised."}
	}
	ITAMP3MF {
	(flecs.doc.Description, flecs.doc.Brief) : {"LSE monitoring tamper interrupt masked flag
This flag is set by hardware when the internal tamper 3 interrupt is raised."}
	}
	ITAMP4MF {
	(flecs.doc.Description, flecs.doc.Brief) : {"HSE monitoring tamper interrupt masked flag
This flag is set by hardware when the internal tamper 4 interrupt is raised."}
	}
	ITAMP5MF {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC calendar overflow tamper interrupt masked flag
This flag is set by hardware when the internal tamper 5 interrupt is raised."}
	}
	ITAMP6MF {
	(flecs.doc.Description, flecs.doc.Brief) : {"ST manufacturer readout tamper interrupt masked flag
This flag is set by hardware when the internal tamper 6 interrupt is raised."}
	}
}

TAMP_SCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP status clear register"}
	CTAMP1F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear TAMP1 detection flag
Writing 1 in this bit clears the TAMP1F bit in the TAMP_SR register."}
	}
	CTAMP2F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear TAMP2 detection flag
Writing 1 in this bit clears the TAMP2F bit in the TAMP_SR register."}
	}
	CTAMP3F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear TAMP3 detection flag
Writing 1 in this bit clears the TAMP3F bit in the TAMP_SR register."}
	}
	CITAMP3F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear ITAMP3 detection flag
Writing 1 in this bit clears the ITAMP3F bit in the TAMP_SR register."}
	}
	CITAMP4F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear ITAMP4 detection flag
Writing 1 in this bit clears the ITAMP4F bit in the TAMP_SR register."}
	}
	CITAMP5F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear ITAMP5 detection flag
Writing 1 in this bit clears the ITAMP5F bit in the TAMP_SR register."}
	}
	CITAMP6F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear ITAMP6 detection flag
Writing 1 in this bit clears the ITAMP6F bit in the TAMP_SR register."}
	}
}

TAMP_BKP0R {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP backup 0 register"}
	BKP {
	(flecs.doc.Description, flecs.doc.Brief) : {"The application can write or read data to and from these registers.
They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.
In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled."}
	}
}

TAMP_BKP1R {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP backup 1 register"}
	BKP {
	(flecs.doc.Description, flecs.doc.Brief) : {"The application can write or read data to and from these registers.
They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.
In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled."}
	}
}

TAMP_BKP2R {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP backup 2 register"}
	BKP {
	(flecs.doc.Description, flecs.doc.Brief) : {"The application can write or read data to and from these registers.
They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.
In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled."}
	}
}

TAMP_BKP3R {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP backup 3 register"}
	BKP {
	(flecs.doc.Description, flecs.doc.Brief) : {"The application can write or read data to and from these registers.
They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.
In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled."}
	}
}

TAMP_BKP4R {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMP backup 4 register"}
	BKP {
	(flecs.doc.Description, flecs.doc.Brief) : {"The application can write or read data to and from these registers.
They are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.
In the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled."}
	}
}

I2C1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Inter-integrated circuit"}
}
module I2C1
CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Control register 1"}
	PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Peripheral enable"}
	}
	TXIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"TX Interrupt enable"}
	}
	RXIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"RX Interrupt enable"}
	}
	ADDRIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Address match interrupt enable (slave
              only)"}
	}
	NACKIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Not acknowledge received interrupt
              enable"}
	}
	STOPIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"STOP detection Interrupt
              enable"}
	}
	TCIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transfer Complete interrupt
              enable"}
	}
	ERRIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Error interrupts enable"}
	}
	DNF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Digital noise filter"}
	}
	ANFOFF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Analog noise filter OFF"}
	}
	TXDMAEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA transmission requests
              enable"}
	}
	RXDMAEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA reception requests
              enable"}
	}
	SBC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Slave byte control"}
	}
	NOSTRETCH {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock stretching disable"}
	}
	WUPEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup from STOP enable"}
	}
	GCEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"General call enable"}
	}
	SMBHEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SMBus Host address enable"}
	}
	SMBDEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SMBus Device Default address
              enable"}
	}
	ALERTEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"SMBUS alert enable"}
	}
	PECEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"PEC enable"}
	}
}

CR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Control register 2"}
	PECBYTE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Packet error checking byte"}
	}
	AUTOEND {
	(flecs.doc.Description, flecs.doc.Brief) : {"Automatic end mode (master
              mode)"}
	}
	RELOAD {
	(flecs.doc.Description, flecs.doc.Brief) : {"NBYTES reload mode"}
	}
	NBYTES {
	(flecs.doc.Description, flecs.doc.Brief) : {"Number of bytes"}
	}
	NACK {
	(flecs.doc.Description, flecs.doc.Brief) : {"NACK generation (slave
              mode)"}
	}
	STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Stop generation (master
              mode)"}
	}
	START {
	(flecs.doc.Description, flecs.doc.Brief) : {"Start generation"}
	}
	HEAD10R {
	(flecs.doc.Description, flecs.doc.Brief) : {"10-bit address header only read
              direction (master receiver mode)"}
	}
	ADD10 {
	(flecs.doc.Description, flecs.doc.Brief) : {"10-bit addressing mode (master
              mode)"}
	}
	RD_WRN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transfer direction (master
              mode)"}
	}
	SADD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Slave address bit (master
              mode)"}
	}
}

OAR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Own address register 1"}
	OA1_0 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interface address"}
	}
	OA1_7_1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interface address"}
	}
	OA1_8_9 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interface address"}
	}
	OA1MODE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Own Address 1 10-bit mode"}
	}
	OA1EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Own Address 1 enable"}
	}
}

OAR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Own address register 2"}
	OA2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interface address"}
	}
	OA2MSK {
	(flecs.doc.Description, flecs.doc.Brief) : {"Own Address 2 masks"}
	}
	OA2EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Own Address 2 enable"}
	}
}

TIMINGR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timing register"}
	SCLL {
	(flecs.doc.Description, flecs.doc.Brief) : {"SCL low period (master
              mode)"}
	}
	SCLH {
	(flecs.doc.Description, flecs.doc.Brief) : {"SCL high period (master
              mode)"}
	}
	SDADEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data hold time"}
	}
	SCLDEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Data setup time"}
	}
	PRESC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timing prescaler"}
	}
}

TIMEOUTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Status register 1"}
	TIMEOUTA {
	(flecs.doc.Description, flecs.doc.Brief) : {"Bus timeout A"}
	}
	TIDLE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Idle clock timeout
              detection"}
	}
	TIMOUTEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock timeout enable"}
	}
	TIMEOUTB {
	(flecs.doc.Description, flecs.doc.Brief) : {"Bus timeout B"}
	}
	TEXTEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Extended clock timeout
              enable"}
	}
}

ISR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt and Status register"}
	ADDCODE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Address match code (Slave
              mode)"}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transfer direction (Slave
              mode)"}
	}
	BUSY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Bus busy"}
	}
	ALERT {
	(flecs.doc.Description, flecs.doc.Brief) : {"SMBus alert"}
	}
	TIMEOUT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timeout or t_low detection
              flag"}
	}
	PECERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"PEC Error in reception"}
	}
	OVR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Overrun/Underrun (slave
              mode)"}
	}
	ARLO {
	(flecs.doc.Description, flecs.doc.Brief) : {"Arbitration lost"}
	}
	BERR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Bus error"}
	}
	TCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transfer Complete Reload"}
	}
	TC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transfer Complete (master
              mode)"}
	}
	STOPF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Stop detection flag"}
	}
	NACKF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Not acknowledge received
              flag"}
	}
	ADDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Address matched (slave
              mode)"}
	}
	RXNE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receive data register not empty
              (receivers)"}
	}
	TXIS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmit interrupt status
              (transmitters)"}
	}
	TXE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmit data register empty
              (transmitters)"}
	}
}

ICR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Interrupt clear register"}
	ALERTCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alert flag clear"}
	}
	TIMOUTCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timeout detection flag
              clear"}
	}
	PECCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"PEC Error flag clear"}
	}
	OVRCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Overrun/Underrun flag
              clear"}
	}
	ARLOCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Arbitration lost flag
              clear"}
	}
	BERRCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Bus error flag clear"}
	}
	STOPCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Stop detection flag clear"}
	}
	NACKCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Not Acknowledge flag clear"}
	}
	ADDRCF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Address Matched flag clear"}
	}
}

PECR {
	(flecs.doc.Description, flecs.doc.Brief) : {"PEC register"}
	PEC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Packet error checking
              register"}
	}
}

RXDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Receive data register"}
	RXDATA {
	(flecs.doc.Description, flecs.doc.Brief) : {"8-bit receive data"}
	}
}

TXDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Transmit data register"}
	TXDATA {
	(flecs.doc.Description, flecs.doc.Brief) : {"8-bit transmit data"}
	}
}

I2C2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module I2C2
RTC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Real-time clock"}
}
module RTC
RTC_TR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC time register "}
	SU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Second units in BCD format"}
	}
	ST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Second tens in BCD format"}
	}
	MNU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Minute units in BCD format"}
	}
	MNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Minute tens in BCD format"}
	}
	HU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour units in BCD format"}
	}
	HT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour tens in BCD format"}
	}
	PM {
	(flecs.doc.Description, flecs.doc.Brief) : {"AM/PM notation"}
	}
}

RTC_DR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC date register "}
	DU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Date units in BCD format"}
	}
	DT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Date tens in BCD format"}
	}
	MU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Month units in BCD format"}
	}
	MT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Month tens in BCD format"}
	}
	WDU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Week day units
..."}
	}
	YU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Year units in BCD format"}
	}
	YT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Year tens in BCD format"}
	}
}

RTC_SSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC sub second register "}
	SS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Sub second value
SS[15:0] is the value in the synchronous prescaler counter. The fraction of a second is given by the formula below:
Second fraction = (PREDIV_S - SS) / (PREDIV_S + 1)
Note: SS can be larger than PREDIV_S only after a shift operation. In that case, the correct time/date is one second less than as indicated by RTC_TR/RTC_DR."}
	}
}

RTC_ICSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC initialization control and status register "}
	ALRAWF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A write flag
This bit is set by hardware when alarm A values can be changed, after the ALRAE bit has been set to 0 in RTC_CR.
It is cleared by hardware in initialization mode."}
	}
	ALRBWF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B write flag
This bit is set by hardware when alarm B values can be changed, after the ALRBE bit has been set to 0 in RTC_CR.
It is cleared by hardware in initialization mode."}
	}
	WUTWF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup timer write flag
This bit is set by hardware when WUT value can be changed, after the WUTE bit has been set to 0 in RTC_CR.
It is cleared by hardware in initialization mode."}
	}
	SHPF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Shift operation pending
This flag is set by hardware as soon as a shift operation is initiated by a write to the RTC_SHIFTR register. It is cleared by hardware when the corresponding shift operation has been executed. Writing to the SHPF bit has no effect."}
	}
	INITS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Initialization status flag
This bit is set by hardware when the calendar year field is different from 0 (Backup domain reset state)."}
	}
	RSF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Registers synchronization flag
This bit is set by hardware each time the calendar registers are copied into the shadow registers (RTC_SSR, RTC_TR and RTC_DR). This bit is cleared by hardware in initialization mode, while a shift operation is pending (SHPF = 1), or when in bypass shadow register mode (BYPSHAD = 1). This bit can also be cleared by software.
It is cleared either by software or by hardware in initialization mode."}
	}
	INITF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Initialization flag
When this bit is set to 1, the RTC is in initialization state, and the time, date and prescaler registers can be updated."}
	}
	INIT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Initialization mode"}
	}
	RECALPF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Recalibration pending Flag
The RECALPF status flag is automatically set to 1 when software writes to the RTC_CALR register, indicating that the RTC_CALR register is blocked. When the new calibration settings are taken into account, this bit returns to 0. Refer to ."}
	}
}

RTC_PRER {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC prescaler register "}
	PREDIV_S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Synchronous prescaler factor
This is the synchronous division factor:
ck_spre frequency = ck_apre frequency/(PREDIV_S+1)"}
	}
	PREDIV_A {
	(flecs.doc.Description, flecs.doc.Brief) : {"Asynchronous prescaler factor
This is the asynchronous division factor:
ck_apre frequency = RTCCLK frequency/(PREDIV_A+1)"}
	}
}

RTC_WUTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC wakeup timer register "}
	WUT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup auto-reload value bits
When the wakeup timer is enabled (WUTE set to 1), the WUTF flag is set every (WUT[15:0]+1) ck_wut cycles. The ck_wut period is selected through WUCKSEL[2:0] bits of the RTC_CR register.
When WUCKSEL[2] = 1, the wakeup timer becomes 17-bits and WUCKSEL[1] effectively becomes WUT[16] the most-significant bit to be reloaded into the timer.
The first assertion of WUTF occurs between WUT and (WUT + 1) ck_wut cycles after WUTE is set. Setting WUT[15:0] to 0x0000 with WUCKSEL[2:0] = 011 (RTCCLK/2) is forbidden."}
	}
}

RTC_CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register"}
	WUCKSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"ck_wut wakeup clock selection
10x: ck_spre (usually 1Hz) clock is selected
11x: ck_spre (usually 1Hz) clock is selected and 216is added to the WUT counter value"}
	}
	TSEDGE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timestamp event active edge
TSE must be reset when TSEDGE is changed to avoid unwanted TSF setting."}
	}
	REFCKON {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC_REFIN reference clock detection enable (50 or 60Hz)
Note: PREDIV_S must be 0x00FF."}
	}
	BYPSHAD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Bypass the shadow registers
Note: If the frequency of the APB1 clock is less than seven times the frequency of RTCCLK, BYPSHAD must be set to 1."}
	}
	FMT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour format"}
	}
	ALRAE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A enable"}
	}
	ALRBE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B enable"}
	}
	WUTE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup timer enable
Note: When the wakeup timer is disabled, wait for WUTWF=1 before enabling it again."}
	}
	TSE {
	(flecs.doc.Description, flecs.doc.Brief) : {"timestamp enable"}
	}
	ALRAIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A interrupt enable"}
	}
	ALRBIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B interrupt enable"}
	}
	WUTIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup timer interrupt enable"}
	}
	TSIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timestamp interrupt enable"}
	}
	ADD1H {
	(flecs.doc.Description, flecs.doc.Brief) : {"Add 1 hour (summer time change)
When this bit is set outside initialization mode, 1 hour is added to the calendar time. This bit is always read as 0."}
	}
	SUB1H {
	(flecs.doc.Description, flecs.doc.Brief) : {"Subtract 1 hour (winter time change)
When this bit is set outside initialization mode, 1 hour is subtracted to the calendar time if the current hour is not 0. This bit is always read as 0.
Setting this bit has no effect when current hour is 0."}
	}
	BKP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Backup
This bit can be written by the user to memorize whether the daylight saving time change has been performed or not."}
	}
	COSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Calibration output selection
When COE = 1, this bit selects which signal is output on CALIB.
These frequencies are valid for RTCCLK at 32.768kHz and prescalers at their default values (PREDIV_A = 127 and PREDIV_S = 255). Refer to ."}
	}
	POL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output polarity
This bit is used to configure the polarity of TAMPALRM output."}
	}
	OSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output selection
These bits are used to select the flag to be routed to TAMPALRM output."}
	}
	COE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Calibration output enable
This bit enables the CALIB output"}
	}
	ITSE {
	(flecs.doc.Description, flecs.doc.Brief) : {"timestamp on internal event enable"}
	}
	TAMPTS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Activate timestamp on tamper detection event
TAMPTS is valid even if TSE = 0 in the RTC_CR register. Timestamp flag is set after the tamper flags, therefore if TAMPTS and TSIE are set, it is recommended to disable the tamper interrupts in order to avoid servicing 2 interrupts."}
	}
	TAMPOE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Tamper detection output enable on TAMPALRM"}
	}
	TAMPALRM_PU {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMPALRM pull-up enable"}
	}
	TAMPALRM_TYPE {
	(flecs.doc.Description, flecs.doc.Brief) : {"TAMPALRM output type"}
	}
	OUT2EN {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC_OUT2 output enable"}
	}
}

RTC_WPR {
	(flecs.doc.Description, flecs.doc.Brief) : {"write protection register"}
	KEY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Write protection key
This byte is written by software.
Reading this byte always returns 0x00.
Refer to  for a description of how to unlock RTC register write protection."}
	}
}

RTC_CALR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC calibration register "}
	CALM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Calibration minus
The frequency of the calendar is reduced by masking CALM out of 220 RTCCLK pulses (32 seconds if the input frequency is 32768Hz). This decreases the frequency of the calendar with a resolution of 0.9537ppm.
To increase the frequency of the calendar, this feature should be used in conjunction with CALP. See ."}
	}
	CALW16 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Use a 16-second calibration cycle period
When CALW16 is set to 1, the 16-second calibration cycle period is selected. This bit must not be set to 1 if CALW8 = 1.
Note: CALM[0] is stuck at 0 when CALW16 = 1. Refer to calibration."}
	}
	CALW8 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Use an 8-second calibration cycle period
When CALW8 is set to 1, the 8-second calibration cycle period is selected.
Note: CALM[1:0] are stuck at 00 when CALW8 = 1. Refer to digital calibration."}
	}
	CALP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Increase frequency of RTC by 488.5ppm
This feature is intended to be used in conjunction with CALM, which lowers the frequency of the calendar with a fine resolution. if the input frequency is 32768Hz, the number of RTCCLK pulses added during a 32-second window is calculated as follows: (512 * CALP) - CALM.
Refer to ."}
	}
}

RTC_SHIFTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC shift control register "}
	SUBFS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Subtract a fraction of a second
These bits are write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR).
The value which is written to SUBFS is added to the synchronous prescaler counter. Since this counter counts down, this operation effectively subtracts from (delays) the clock by:
Delay (seconds) = SUBFS / (PREDIV_S + 1)
A fraction of a second can effectively be added to the clock (advancing the clock) when the ADD1S function is used in conjunction with SUBFS, effectively advancing the clock by:
Advance (seconds) = (1 - (SUBFS / (PREDIV_S + 1))).
Note: Writing to SUBFS causes RSF to be cleared. Software can then wait until RSF = 1 to be sure that the shadow registers have been updated with the shifted time."}
	}
	ADD1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Add one second
This bit is write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR).
This function is intended to be used with SUBFS (see description below) in order to effectively add a fraction of a second to the clock in an atomic operation."}
	}
}

RTC_TSTR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC timestamp time register "}
	SU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Second units in BCD format."}
	}
	ST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Second tens in BCD format."}
	}
	MNU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Minute units in BCD format."}
	}
	MNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Minute tens in BCD format."}
	}
	HU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour units in BCD format."}
	}
	HT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour tens in BCD format."}
	}
	PM {
	(flecs.doc.Description, flecs.doc.Brief) : {"AM/PM notation"}
	}
}

RTC_TSDR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC timestamp date register "}
	DU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Date units in BCD format"}
	}
	DT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Date tens in BCD format"}
	}
	MU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Month units in BCD format"}
	}
	MT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Month tens in BCD format"}
	}
	WDU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Week day units"}
	}
}

RTC_TSSSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC timestamp sub second register "}
	SS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Sub second value
SS[15:0] is the value of the synchronous prescaler counter when the timestamp event occurred."}
	}
}

RTC_ALRMAR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC alarm A register "}
	SU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Second units in BCD format."}
	}
	ST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Second tens in BCD format."}
	}
	MSK1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A seconds mask"}
	}
	MNU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Minute units in BCD format"}
	}
	MNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Minute tens in BCD format"}
	}
	MSK2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A minutes mask"}
	}
	HU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour units in BCD format"}
	}
	HT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour tens in BCD format"}
	}
	PM {
	(flecs.doc.Description, flecs.doc.Brief) : {"AM/PM notation"}
	}
	MSK3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A hours mask"}
	}
	DU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Date units or day in BCD format"}
	}
	DT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Date tens in BCD format"}
	}
	WDSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Week day selection"}
	}
	MSK4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A date mask"}
	}
}

RTC_ALRMASSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC alarm A sub second register "}
	SS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Sub seconds value
This value is compared with the contents of the synchronous prescaler counter to determine if alarm A is to be activated. Only bits 0 up MASKSS-1 are compared."}
	}
	MASKSS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Mask the most-significant bits starting at this bit
2:	SS[14:2] are don't care in alarm A comparison. Only SS[1:0] are compared.
3:	SS[14:3] are don't care in alarm A comparison. Only SS[2:0] are compared.
...
12:	SS[14:12] are don't care in alarm A comparison. SS[11:0] are compared.
13:	SS[14:13] are don't care in alarm A comparison. SS[12:0] are compared.
14:	SS[14] is don't care in alarm A comparison. SS[13:0] are compared.
15:	All 15 SS bits are compared and must match to activate alarm.
The overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation.
Note: The overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation."}
	}
}

RTC_ALRMBR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC alarm B register "}
	SU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Second units in BCD format"}
	}
	ST {
	(flecs.doc.Description, flecs.doc.Brief) : {"Second tens in BCD format"}
	}
	MSK1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B seconds mask"}
	}
	MNU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Minute units in BCD format"}
	}
	MNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Minute tens in BCD format"}
	}
	MSK2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B minutes mask"}
	}
	HU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour units in BCD format"}
	}
	HT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Hour tens in BCD format"}
	}
	PM {
	(flecs.doc.Description, flecs.doc.Brief) : {"AM/PM notation"}
	}
	MSK3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B hours mask"}
	}
	DU {
	(flecs.doc.Description, flecs.doc.Brief) : {"Date units or day in BCD format"}
	}
	DT {
	(flecs.doc.Description, flecs.doc.Brief) : {"Date tens in BCD format"}
	}
	WDSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"Week day selection"}
	}
	MSK4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B date mask"}
	}
}

RTC_ALRMBSSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC alarm B sub second register "}
	SS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Sub seconds value
This value is compared with the contents of the synchronous prescaler counter to determine if alarm B is to be activated. Only bits 0 up to MASKSS-1 are compared."}
	}
	MASKSS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Mask the most-significant bits starting at this bit
...
The overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation."}
	}
}

RTC_SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC status register "}
	ALRAF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A flag
This flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the alarm A register (RTC_ALRMAR)."}
	}
	ALRBF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B flag
This flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the alarm B register (RTC_ALRMBR)."}
	}
	WUTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup timer flag
This flag is set by hardware when the wakeup auto-reload counter reaches 0.
This flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again."}
	}
	TSF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timestamp flag
This flag is set by hardware when a timestamp event occurs.
If ITSF flag is set, TSF must be cleared together with ITSF."}
	}
	TSOVF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timestamp overflow flag
This flag is set by hardware when a timestamp event occurs while TSF is already set.
It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."}
	}
	ITSF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal timestamp flag
This flag is set by hardware when a timestamp on the internal event occurs."}
	}
}

RTC_MISR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC masked interrupt status register "}
	ALRAMF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm A masked flag
This flag is set by hardware when the alarm A interrupt occurs."}
	}
	ALRBMF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Alarm B masked flag
This flag is set by hardware when the alarm B interrupt occurs."}
	}
	WUTMF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Wakeup timer masked flag
This flag is set by hardware when the wakeup timer interrupt occurs.
This flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again."}
	}
	TSMF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timestamp masked flag
This flag is set by hardware when a timestamp interrupt occurs.
If ITSF flag is set, TSF must be cleared together with ITSF."}
	}
	TSOVMF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Timestamp overflow masked flag
This flag is set by hardware when a timestamp interrupt occurs while TSMF is already set.
It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."}
	}
	ITSMF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Internal timestamp masked flag
This flag is set by hardware when a timestamp on the internal event occurs and timestampinterrupt is raised."}
	}
}

RTC_SCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC status clear register "}
	CALRAF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear alarm A flag
Writing 1 in this bit clears the ALRAF bit in the RTC_SR register."}
	}
	CALRBF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear alarm B flag
Writing 1 in this bit clears the ALRBF bit in the RTC_SR register."}
	}
	CWUTF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear wakeup timer flag
Writing 1 in this bit clears the WUTF bit in the RTC_SR register."}
	}
	CTSF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear timestamp flag
Writing 1 in this bit clears the TSOVF bit in the RTC_SR register.
If ITSF flag is set, TSF must be cleared together with ITSF by setting CRSF and CITSF."}
	}
	CTSOVF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear timestamp overflow flag
Writing 1 in this bit clears the TSOVF bit in the RTC_SR register.
It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."}
	}
	CITSF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clear internal timestamp flag
Writing 1 in this bit clears the ITSF bit in the RTC_SR register."}
	}
}

TIM14 {
	(flecs.doc.Description, flecs.doc.Brief) : {"General purpose timers"}
}
module TIM14
CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 1"}
	UIFREMAP {
	(flecs.doc.Description, flecs.doc.Brief) : {"UIF status bit remapping"}
	}
	CKD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock division"}
	}
	ARPE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto-reload preload enable"}
	}
	OPM {
	(flecs.doc.Description, flecs.doc.Brief) : {"One-pulse mode"}
	}
	URS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update request source"}
	}
	UDIS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update disable"}
	}
	CEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Counter enable"}
	}
}

DIER {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA/Interrupt enable register"}
	CC1IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 interrupt
              enable"}
	}
	UIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update interrupt enable"}
	}
}

SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"status register"}
	CC1OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 overcapture
              flag"}
	}
	CC1IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 1 interrupt
              flag"}
	}
	UIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update interrupt flag"}
	}
}

EGR {
	(flecs.doc.Description, flecs.doc.Brief) : {"event generation register"}
	CC1G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 1
              generation"}
	}
	UG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update generation"}
	}
}

CCMR1_Output {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 1 (output
          mode)"}
	CC1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"CC1S"}
	}
	OC1FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"OC1FE"}
	}
	OC1PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"OC1PE"}
	}
	OC1M {
	(flecs.doc.Description, flecs.doc.Brief) : {"OC1M"}
	}
	OC1CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"OC1CE"}
	}
	OC1M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 mode - bit
              3"}
	}
}

CCMR1_Input {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 1 (input
          mode)"}
	IC1F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 1 filter"}
	}
	ICPCS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 1 prescaler"}
	}
	CC1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1
              selection"}
	}
}

CCER {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare enable
          register"}
	CC1NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              Polarity"}
	}
	CC1P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              Polarity"}
	}
	CC1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              enable"}
	}
}

CNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"counter"}
	CNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"low counter value"}
	}
	UIFCPY {
	(flecs.doc.Description, flecs.doc.Brief) : {"UIF Copy"}
	}
}

PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"prescaler"}
	PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prescaler value"}
	}
}

ARR {
	(flecs.doc.Description, flecs.doc.Brief) : {"auto-reload register"}
	ARR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low Auto-reload value"}
	}
}

CCR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 1"}
	CCR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low Capture/Compare 1
              value"}
	}
}

TISEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM timer input selection
          register"}
	TISEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"TI1[0] to TI1[15] input
              selection"}
	}
}

TIM2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"General-purpose-timers"}
}
module TIM2
CR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 1"}
	UIFREMAP {
	(flecs.doc.Description, flecs.doc.Brief) : {"UIF status bit remapping"}
	}
	CKD {
	(flecs.doc.Description, flecs.doc.Brief) : {"Clock division"}
	}
	ARPE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Auto-reload preload enable"}
	}
	CMS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Center-aligned mode
              selection"}
	}
	DIR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Direction"}
	}
	OPM {
	(flecs.doc.Description, flecs.doc.Brief) : {"One-pulse mode"}
	}
	URS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update request source"}
	}
	UDIS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update disable"}
	}
	CEN {
	(flecs.doc.Description, flecs.doc.Brief) : {"Counter enable"}
	}
}

CR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"control register 2"}
	TI1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"TI1 selection"}
	}
	MMS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Master mode selection"}
	}
	CCDS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare DMA
              selection"}
	}
}

SMCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"slave mode control register"}
	TS_4_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger selection"}
	}
	SMS_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Slave mode selection - bit
              3"}
	}
	ETP {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger polarity"}
	}
	ECE {
	(flecs.doc.Description, flecs.doc.Brief) : {"External clock enable"}
	}
	ETPS {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger prescaler"}
	}
	ETF {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger filter"}
	}
	MSM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Master/Slave mode"}
	}
	TS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger selection"}
	}
	OCCS {
	(flecs.doc.Description, flecs.doc.Brief) : {"OCREF clear selection"}
	}
	SMS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Slave mode selection"}
	}
}

DIER {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA/Interrupt enable register"}
	TDE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger DMA request enable"}
	}
	CC4DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 DMA request
              enable"}
	}
	CC3DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 DMA request
              enable"}
	}
	CC2DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 DMA request
              enable"}
	}
	CC1DE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 DMA request
              enable"}
	}
	UDE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update DMA request enable"}
	}
	TIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger interrupt enable"}
	}
	CC4IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 interrupt
              enable"}
	}
	CC3IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 interrupt
              enable"}
	}
	CC2IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 interrupt
              enable"}
	}
	CC1IE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 interrupt
              enable"}
	}
	UIE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update interrupt enable"}
	}
}

SR {
	(flecs.doc.Description, flecs.doc.Brief) : {"status register"}
	CC4OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 overcapture
              flag"}
	}
	CC3OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 overcapture
              flag"}
	}
	CC2OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 2 overcapture
              flag"}
	}
	CC1OF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 overcapture
              flag"}
	}
	TIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger interrupt flag"}
	}
	CC4IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 interrupt
              flag"}
	}
	CC3IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 interrupt
              flag"}
	}
	CC2IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 interrupt
              flag"}
	}
	CC1IF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 1 interrupt
              flag"}
	}
	UIF {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update interrupt flag"}
	}
}

EGR {
	(flecs.doc.Description, flecs.doc.Brief) : {"event generation register"}
	TG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trigger generation"}
	}
	CC4G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 4
              generation"}
	}
	CC3G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 3
              generation"}
	}
	CC2G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 2
              generation"}
	}
	CC1G {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 1
              generation"}
	}
	UG {
	(flecs.doc.Description, flecs.doc.Brief) : {"Update generation"}
	}
}

CCMR1_Output {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 1 (output
          mode)"}
	OC2M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 2 mode - bit
              3"}
	}
	OC1M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 1 mode - bit
              3"}
	}
	OC2CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 2 clear
              enable"}
	}
	OC2M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 2 mode"}
	}
	OC2PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 2 preload
              enable"}
	}
	OC2FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 2 fast
              enable"}
	}
	CC2S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2
              selection"}
	}
	OC1CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 1 clear
              enable"}
	}
	OC1M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 1 mode"}
	}
	OC1PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 1 preload
              enable"}
	}
	OC1FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 1 fast
              enable"}
	}
	CC1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1
              selection"}
	}
}

CCMR1_Input {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 1 (input
          mode)"}
	IC2F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 2 filter"}
	}
	IC2PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 2 prescaler"}
	}
	CC2S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/compare 2
              selection"}
	}
	IC1F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 1 filter"}
	}
	IC1PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 1 prescaler"}
	}
	CC1S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1
              selection"}
	}
}

CCMR2_Output {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 2 (output
          mode)"}
	OC4M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 4 mode - bit
              3"}
	}
	OC3M_3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output Compare 3 mode - bit
              3"}
	}
	OC4CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 clear
              enable"}
	}
	OC4M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 mode"}
	}
	OC4PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 preload
              enable"}
	}
	OC4FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 4 fast
              enable"}
	}
	CC4S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4
              selection"}
	}
	OC3CE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 clear
              enable"}
	}
	OC3M {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 mode"}
	}
	OC3PE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 preload
              enable"}
	}
	OC3FE {
	(flecs.doc.Description, flecs.doc.Brief) : {"Output compare 3 fast
              enable"}
	}
	CC3S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3
              selection"}
	}
}

CCMR2_Input {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare mode register 2 (input
          mode)"}
	IC4F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 4 filter"}
	}
	IC4PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 4 prescaler"}
	}
	CC4S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4
              selection"}
	}
	IC3F {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 3 filter"}
	}
	IC3PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Input capture 3 prescaler"}
	}
	CC3S {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3
              selection"}
	}
}

CCER {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare enable
          register"}
	CC4NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 output
              Polarity"}
	}
	CC4P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 output
              Polarity"}
	}
	CC4E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 4 output
              enable"}
	}
	CC3NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 output
              Polarity"}
	}
	CC3P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 output
              Polarity"}
	}
	CC3E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 3 output
              enable"}
	}
	CC2NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 output
              Polarity"}
	}
	CC2P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 output
              Polarity"}
	}
	CC2E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 2 output
              enable"}
	}
	CC1NP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              Polarity"}
	}
	CC1P {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              Polarity"}
	}
	CC1E {
	(flecs.doc.Description, flecs.doc.Brief) : {"Capture/Compare 1 output
              enable"}
	}
}

CNT {
	(flecs.doc.Description, flecs.doc.Brief) : {"counter"}
	CNT_H {
	(flecs.doc.Description, flecs.doc.Brief) : {"High counter value (TIM2
              only)"}
	}
	CNT_L {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low counter value"}
	}
}

PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"prescaler"}
	PSC {
	(flecs.doc.Description, flecs.doc.Brief) : {"Prescaler value"}
	}
}

ARR {
	(flecs.doc.Description, flecs.doc.Brief) : {"auto-reload register"}
	ARR_H {
	(flecs.doc.Description, flecs.doc.Brief) : {"High Auto-reload value (TIM2
              only)"}
	}
	ARR_L {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low Auto-reload value"}
	}
}

CCR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 1"}
	CCR1_H {
	(flecs.doc.Description, flecs.doc.Brief) : {"High Capture/Compare 1 value (TIM2
              only)"}
	}
	CCR1_L {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low Capture/Compare 1
              value"}
	}
}

CCR2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 2"}
	CCR2_H {
	(flecs.doc.Description, flecs.doc.Brief) : {"High Capture/Compare 2 value (TIM2
              only)"}
	}
	CCR2_L {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low Capture/Compare 2
              value"}
	}
}

CCR3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 3"}
	CCR3_H {
	(flecs.doc.Description, flecs.doc.Brief) : {"High Capture/Compare value (TIM2
              only)"}
	}
	CCR3_L {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low Capture/Compare value"}
	}
}

CCR4 {
	(flecs.doc.Description, flecs.doc.Brief) : {"capture/compare register 4"}
	CCR4_H {
	(flecs.doc.Description, flecs.doc.Brief) : {"High Capture/Compare value (TIM2
              only)"}
	}
	CCR4_L {
	(flecs.doc.Description, flecs.doc.Brief) : {"Low Capture/Compare value"}
	}
}

DCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA control register"}
	DBL {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA burst length"}
	}
	DBA {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA base address"}
	}
}

DMAR {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA address for full transfer"}
	DMAB {
	(flecs.doc.Description, flecs.doc.Brief) : {"DMA register for burst
              accesses"}
	}
}

OR1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM option register"}
	IOCREF_CLR {
	(flecs.doc.Description, flecs.doc.Brief) : {"IOCREF_CLR"}
	}
}

AF1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM alternate function option register
          1"}
	ETRSEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"External trigger source
              selection"}
	}
}

TISEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM alternate function option register
          1"}
	TI1SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"TI1SEL"}
	}
	TI2SEL {
	(flecs.doc.Description, flecs.doc.Brief) : {"TI2SEL"}
	}
}

TIM3 {
	(flecs.doc.Description, flecs.doc.Brief) : {"(null)"}
}
module TIM3
VREFBUF {
	(flecs.doc.Description, flecs.doc.Brief) : {"System configuration controller"}
}
module VREFBUF
CSR {
	(flecs.doc.Description, flecs.doc.Brief) : {"VREFBUF control and status
          register"}
	ENVR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Voltage reference buffer mode enable
              This bit is used to enable the voltage reference
              buffer mode."}
	}
	HIZ {
	(flecs.doc.Description, flecs.doc.Brief) : {"High impedance mode This bit controls
              the analog switch to connect or not the VREF+ pin.
              Refer to Table196: VREF buffer modes for the mode
              descriptions depending on ENVR bit
              configuration."}
	}
	VRR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Voltage reference buffer
              ready"}
	}
	VRS {
	(flecs.doc.Description, flecs.doc.Brief) : {"Voltage reference scale These bits
              select the value generated by the voltage reference
              buffer. Other: Reserved"}
	}
}

CCR {
	(flecs.doc.Description, flecs.doc.Brief) : {"VREFBUF calibration control
          register"}
	TRIM {
	(flecs.doc.Description, flecs.doc.Brief) : {"Trimming code These bits are
              automatically initialized after reset with the
              trimming value stored in the Flash memory during the
              production test. Writing into these bits allows to
              tune the internal reference buffer
              voltage."}
	}
}

DBG {
	(flecs.doc.Description, flecs.doc.Brief) : {"MCU debug component"}
}
module DBG
IDCODE {
	(flecs.doc.Description, flecs.doc.Brief) : {"DBGMCU_IDCODE"}
	DEV_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Device identifier"}
	}
	REV_ID {
	(flecs.doc.Description, flecs.doc.Brief) : {"Revision identifie"}
	}
}

CR {
	(flecs.doc.Description, flecs.doc.Brief) : {"Debug MCU configuration
          register"}
	DBG_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Debug Stop mode"}
	}
	DBG_STANDBY {
	(flecs.doc.Description, flecs.doc.Brief) : {"Debug Standby mode"}
	}
}

APB_FZ1 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Debug MCU APB1 freeze
          register1"}
	DBG_TIM2_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM2 counter stopped when core is
              halted"}
	}
	DBG_TIM3_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM3 counter stopped when core is
              halted"}
	}
	DBG_RTC_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"RTC counter stopped when core is
              halted"}
	}
	DBG_WWDG_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Window watchdog counter stopped when
              core is halted"}
	}
	DBG_IWDG_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"Independent watchdog counter stopped
              when core is halted"}
	}
	DBG_I2C1_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"I2C1 SMBUS timeout counter stopped when
              core is halted"}
	}
}

APB_FZ2 {
	(flecs.doc.Description, flecs.doc.Brief) : {"Debug MCU APB1 freeze register
          2"}
	DBG_TIM1_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"TIM1 counter stopped when core is
              halted"}
	}
	DBG_TIM14_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"DBG_TIM14_STOP"}
	}
	DBG_TIM16_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"DBG_TIM16_STOP"}
	}
	DBG_TIM17_STOP {
	(flecs.doc.Description, flecs.doc.Brief) : {"DBG_TIM17_STOP"}
	}
}

